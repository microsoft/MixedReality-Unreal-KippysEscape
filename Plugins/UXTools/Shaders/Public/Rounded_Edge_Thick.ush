#ifndef HUSHED_VERTEX_FRAGMENT_SHADER
#define HUSHED_VERTEX_FRAGMENT_SHADER

static MaterialFloat4x4 HUX_OBJECT_TO_WORLD_POS_MATRIX;
static MaterialFloat3x3 ObjectToWorldDir;
#define Use_Global_Left_Index (Use_Global_Left_Index_Int!=0)
#define Use_Global_Right_Index (Use_Global_Right_Index_Int!=0)
static int Use_Global_Left_Index_Int;
static int Use_Global_Right_Index_Int;
static float4 Global_Left_Index_Tip_Position;
static float4 Global_Right_Index_Tip_Position;
static float4 Global_Left_Index_Middle_Position;
static float4 Global_Right_Index_Middle_Position;
static float4 Global_Left_Thumb_Tip_Position;
static float4 Global_Right_Thumb_Tip_Position;
static float  Global_Left_Index_Tip_Proximity;
static float  Global_Right_Index_Tip_Proximity;

//BLOCK_BEGIN Object_To_World_Pos 206

void Object_To_World_Pos_B206(
    float3 Pos_Object,
    out float3 Pos_World)
{
    Pos_World=(mul(float4(Pos_Object,1.0),HUX_OBJECT_TO_WORLD_POS_MATRIX).xyz);
    
}
//BLOCK_END Object_To_World_Pos

//BLOCK_BEGIN Iridescence_Vertex 223

void Iridescence_Vertex_B223(
    float Intensity,
    Texture2D Texture, SamplerState Texture_Sampler,
    float Left_X0,
    float Left_X1,
    float Right_X0,
    float Right_X1,
    float Angle,
    float2 UV,
    float TdotI,
    out float3 Iridescence)
{
    float k = TdotI*0.5+0.5;
    
    float x = lerp(Left_X0,Left_X1,k);
    float4 left = Texture.SampleLevel(Texture_Sampler,float2(x,0.5),0);
    
    x = lerp(Right_X0,Right_X1,k);
    float4 right = Texture.SampleLevel(Texture_Sampler,float2(x,0.5),0);
    
    float2 XY = UV - float2(0.5,0.5);
    //float s = saturate(dot(XY,Axis)+0.5);
    float angle = radians(Angle);
    float s = (cos(angle)*XY.x - sin(angle)*XY.y)/cos(angle);
    Iridescence = Intensity*(left.rgb + s*(right.rgb-left.rgb));
    
    
}
//BLOCK_END Iridescence_Vertex

//BLOCK_BEGIN Round_Rect_Vertex 246

void Round_Rect_Vertex_B246(
    float2 UV,
    float Radius,
    float Margin,
    float Anisotropy,
    float Gradient1,
    float Gradient2,
    out float2 Rect_UV,
    out float4 Rect_Parms,
    out float2 Scale_XY,
    out float2 Line_UV)
{
    Scale_XY = float2(Anisotropy,1.0);
    Line_UV = (UV - float2(0.5,0.5));
    Rect_UV = Line_UV * Scale_XY;
    Rect_Parms.xy = Scale_XY*0.5-float2(Radius,Radius)-float2(Margin,Margin);
    Rect_Parms.z = Gradient1; //Radius - Line_Width;
    Rect_Parms.w = Gradient2;
}
//BLOCK_END Round_Rect_Vertex

//BLOCK_BEGIN Line_Vertex 240

void Line_Vertex_B240(
    float2 Scale_XY,
    float2 UV,
    float Time,
    float Rate,
    float4 Highlight_Transform,
    out float3 Line_Vertex)
{
    float angle2 = (Rate*Time) * 2.0 * 3.1416;
    float sinAngle2 = sin(angle2);
    float cosAngle2 = cos(angle2);
    
    float2 xformUV = UV * Highlight_Transform.xy + Highlight_Transform.zw;
    Line_Vertex.x = 0.0;
    Line_Vertex.y = cosAngle2*xformUV.x-sinAngle2*xformUV.y;
    Line_Vertex.z = 0.0; //sinAngle2*xformUV.x+cosAngle2*xformUV.y;
    
}
//BLOCK_END Line_Vertex

//BLOCK_BEGIN Blob_Vertex 224

void Blob_Vertex_B224(
    float3 Position,
    float3 Normal,
    float3 Tangent,
    float3 Bitangent,
    float3 Blob_Position,
    float Intensity,
    float Blob_Near_Size,
    float Blob_Far_Size,
    float Blob_Near_Distance,
    float Blob_Far_Distance,
    float Blob_Fade_Length,
    float Blob_Pulse,
    float Blob_Fade,
    out float4 Blob_Info)
{
    
    float3 blob =  (Use_Global_Left_Index ? Global_Left_Index_Tip_Position.xyz :  Blob_Position);
    float3 delta = blob - Position;
    float dist = dot(Normal,delta);
    
    float lerpValue = saturate((abs(dist)-Blob_Near_Distance)/(Blob_Far_Distance-Blob_Near_Distance));
    float fadeValue = 1.0-clamp((abs(dist)-Blob_Far_Distance)/Blob_Fade_Length,0.0,1.0);
    
    float size = Blob_Near_Size + (Blob_Far_Size-Blob_Near_Size)*lerpValue;
    
    float2 blobXY = float2(dot(delta,Tangent),dot(delta,Bitangent))/(0.0001+size);
    
    float Fade = fadeValue*Intensity*Blob_Fade;
    
    float Distance = (lerpValue*0.5+0.5)*(1.0-Blob_Pulse);
    Blob_Info = float4(blobXY.x,blobXY.y,Distance,Fade);
    
}
//BLOCK_END Blob_Vertex

//BLOCK_BEGIN Blob_Vertex 225

void Blob_Vertex_B225(
    float3 Position,
    float3 Normal,
    float3 Tangent,
    float3 Bitangent,
    float3 Blob_Position,
    float Intensity,
    float Blob_Near_Size,
    float Blob_Far_Size,
    float Blob_Near_Distance,
    float Blob_Far_Distance,
    float Blob_Fade_Length,
    float Blob_Pulse,
    float Blob_Fade,
    out float4 Blob_Info)
{
    
    float3 blob =  (Use_Global_Right_Index ? Global_Right_Index_Tip_Position.xyz :  Blob_Position);
    float3 delta = blob - Position;
    float dist = dot(Normal,delta);
    
    float lerpValue = saturate((abs(dist)-Blob_Near_Distance)/(Blob_Far_Distance-Blob_Near_Distance));
    float fadeValue = 1.0-clamp((abs(dist)-Blob_Far_Distance)/Blob_Fade_Length,0.0,1.0);
    
    float size = Blob_Near_Size + (Blob_Far_Size-Blob_Near_Size)*lerpValue;
    
    float2 blobXY = float2(dot(delta,Tangent),dot(delta,Bitangent))/(0.0001+size);
    
    float Fade = fadeValue*Intensity*Blob_Fade;
    
    float Distance = (lerpValue*0.5+0.5)*(1.0-Blob_Pulse);
    Blob_Info = float4(blobXY.x,blobXY.y,Distance,Fade);
    
}
//BLOCK_END Blob_Vertex

//BLOCK_BEGIN Move_Verts 234

void Move_Verts_B234(
    float Anisotropy,
    float3 P,
    float Radius,
    out float3 New_P,
    out float2 New_UV,
    out float Radial_Gradient,
    out float3 Radial_Dir)
{
    float2 UV = P.xy * 2 + 0.5;
    float2 center = saturate(UV);
    float2 delta = UV - center;
            
    float2 r2 = 2.0 * float2(Radius / Anisotropy, Radius);
            
    New_UV = center + r2 * (UV - 2 * center + 0.5);
    New_P = float3(New_UV - 0.5, P.z);
            
    Radial_Gradient = 1.0 - length(delta) * 2.0;
    Radial_Dir = float3(delta * r2, 0.0);
    
}
//BLOCK_END Move_Verts

//BLOCK_BEGIN Edge_AA_Vertex 235

void Edge_AA_Vertex_B235(
    float3 Position_World,
    float3 Position_Object,
    float3 Normal_Object,
    float3 Eye,
    float Radial_Gradient,
    float3 Radial_Dir,
    float3 Tangent,
    out float Gradient1,
    out float Gradient2)
{
    // main code goes here
    float3 I = (Eye-Position_World);
    float3 T = (mul(Tangent, ObjectToWorldDir));
    float g = (dot(T,I)<0.0) ? 0.0 : 1.0;
    if (Normal_Object.z==0) { // edge
        //float3 T = Position_Object.z>0.0 ? float3(0.0,0.0,1.0) : float3(0.0,0.0,-1.0);
        Gradient1 = Position_Object.z>0.0 ? g : 1.0;
        Gradient2 = Position_Object.z>0.0 ? 1.0 : g;
    } else {
    //    float3 R = (mul(Tangent, ObjectToWorldDir)); //Radial_Dir);
    //    float k = (dot(R,I)>0.0 ? 1.0 : 0.0);
    //    float kk = dot(normalize(R),normalize(I));
    //    float k =  kk>0.0 ? kk*Edge_Bend : 0.0;
        Gradient1 = g + (1.0-g)*(Radial_Gradient);
        Gradient2 = 1.0;
    }
    
}
//BLOCK_END Edge_AA_Vertex

//BLOCK_BEGIN Object_To_World_Dir 237

void Object_To_World_Dir_B237(
    float3 Dir_Object,
    out float3 Binormal_World,
    out float3 Binormal_World_N,
    out float Binormal_Length)
{
    Binormal_World = (mul(Dir_Object, ObjectToWorldDir));
    Binormal_Length = length(Binormal_World);
    Binormal_World_N = Binormal_World / Binormal_Length;
}
//BLOCK_END Object_To_World_Dir


static float3 huxVertexOutput_Normal;
static float2 huxVertexOutput_UV;
static float3 huxVertexOutput_Tangent;
static float4 huxVertexOutput_Extra1;
static float4 huxVertexOutput_Extra2;
static float4 huxVertexOutput_Extra3;
static float3 huxVertexOutput_Offset;

float3 Hushed_Vertex(
    FMaterialVertexParameters Parameters
    ,float _Radius_
    ,float _Blob_Enable_
    ,float3 _Blob_Position_
    ,float _Blob_Intensity_
    ,float _Blob_Near_Size_
    ,float _Blob_Far_Size_
    ,float _Blob_Near_Distance_
    ,float _Blob_Far_Distance_
    ,float _Blob_Fade_Length_
    ,float _Blob_Pulse_
    ,float _Blob_Fade_
    ,float _Blob_Enable_2_
    ,float3 _Blob_Position_2_
    ,float _Blob_Near_Size_2_
    ,float _Blob_Pulse_2_
    ,float _Blob_Fade_2_
    ,float _Rate_
    ,float4 _Highlight_Transform_
    ,float _Iridescence_Intensity_
    ,Texture2D _Iridescence_Ramp_, SamplerState _Iridescence_Ramp_Sampler
    ,float _Left_X0_
    ,float _Left_X1_
    ,float _Right_X0_
    ,float _Right_X1_
    ,float _Angle_
    ,float _Smooth_Edges_
    ,int useGlobalLeftIndex
    ,int useGlobalRightIndex
    ,float4 globalLeftIndexTipPosition
    ,float4 globalRightIndexTipPosition

	,float3 vertexInput_Eye
	,float inputTime
)
{
    float3 vertexWorldPosition = GetWorldPosition(Parameters);
    //float3 vertexLocalPosition = mul(float4(vertexWorldPosition, 1), GetPrimitiveData(Parameters.PrimitiveId).WorldToLocal).xyz;
    float3 vertexLocalPosition = Parameters.PreSkinnedPosition;
	//float3 worldNormal = Parameters.WorldNormal; //mul(MaterialFloat3(1.00000000,0.00000000,0.00000000), (MaterialFloat3x3)(Parameters.TangentToWorld));
	//float3 vertexLocalNormal = mul(worldNormal,(MaterialFloat3x3)(GetPrimitiveData(Parameters.PrimitiveId).WorldToLocal));
    float3 vertexLocalNormal = Parameters.PreSkinnedNormal;
	float3 worldTangent = Parameters.TangentToWorld[0];
	float3 vertexLocalTangent = normalize(mul(worldTangent,(MaterialFloat3x3)(GetPrimitiveData(Parameters.PrimitiveId).WorldToLocal)));

    #if USE_INSTANCING || IS_MESHPARTICLE_FACTORY
    ObjectToWorldDir = (MaterialFloat3x3)Parameters.InstanceLocalToWorld;
    #else
    ObjectToWorldDir = GetLocalToWorld3x3(Parameters.PrimitiveId);
    #endif

    HUX_OBJECT_TO_WORLD_POS_MATRIX = GetPrimitiveData(Parameters.PrimitiveId).LocalToWorld;

    Use_Global_Left_Index_Int = useGlobalLeftIndex;
    Use_Global_Right_Index_Int = useGlobalRightIndex;
    Global_Left_Index_Tip_Position = globalLeftIndexTipPosition;
    Global_Right_Index_Tip_Position = globalRightIndexTipPosition;

    // Object_To_World_Dir
    float3 Nrm_World_Q230;
    Nrm_World_Q230 = normalize((mul(vertexLocalNormal, ObjectToWorldDir)));
    
    // Object_To_World_Dir
    float3 Tangent_World_Q236;
    float3 Tangent_World_N_Q236;
    float Tangent_Length_Q236;
    Tangent_World_Q236 = (mul(float3(1,0,0), ObjectToWorldDir));
    Tangent_Length_Q236 = length(Tangent_World_Q236);
    Tangent_World_N_Q236 = Tangent_World_Q236 / Tangent_Length_Q236;

    float3 Binormal_World_Q237;
    float3 Binormal_World_N_Q237;
    float Binormal_Length_Q237;
    Object_To_World_Dir_B237(float3(0,1,0),Binormal_World_Q237,Binormal_World_N_Q237,Binormal_Length_Q237);

    float3 Pos_World_Q212;
    Object_To_World_Pos_B206(float3(0,0,0),Pos_World_Q212);

    // Divide
    float Anisotropy_Q238 = Tangent_Length_Q236 / Binormal_Length_Q237;

    // Incident3
    float3 Incident_Q208 = normalize(Pos_World_Q212 - vertexInput_Eye);

    float3 New_P_Q234;
    float2 New_UV_Q234;
    float Radial_Gradient_Q234;
    float3 Radial_Dir_Q234;
    Move_Verts_B234(Anisotropy_Q238,vertexLocalPosition,_Radius_,New_P_Q234,New_UV_Q234,Radial_Gradient_Q234,Radial_Dir_Q234);

    // DotProduct3
    float Dot_Q211;
    Dot_Q211 = dot(Tangent_World_N_Q236, Incident_Q208);
    //Dot_Q211 = sign(Dot_Q211)*Dot_Q211*Dot_Q211;
    
    float3 Pos_World_Q206;
    Object_To_World_Pos_B206(New_P_Q234,Pos_World_Q206);

    float3 Iridescence_Q223;
    Iridescence_Vertex_B223(_Iridescence_Intensity_,_Iridescence_Ramp_,_Iridescence_Ramp_Sampler,_Left_X0_,_Left_X1_,_Right_X0_,_Right_X1_,_Angle_,New_UV_Q234,Dot_Q211,Iridescence_Q223);

    float4 Blob_Info_Q224;
    if (_Blob_Enable_==1.0) {
      Blob_Vertex_B224(Pos_World_Q206,Nrm_World_Q230,Tangent_World_N_Q236,Binormal_World_N_Q237,_Blob_Position_,_Blob_Intensity_,_Blob_Near_Size_,_Blob_Far_Size_,_Blob_Near_Distance_,_Blob_Far_Distance_,_Blob_Fade_Length_,_Blob_Pulse_,_Blob_Fade_,Blob_Info_Q224);
    } else {
      Blob_Info_Q224 = float4(0,0,0,0);
    }

    float4 Blob_Info_Q225;
    if (_Blob_Enable_2_==1.0) {
      Blob_Vertex_B225(Pos_World_Q206,Nrm_World_Q230,Tangent_World_N_Q236,Binormal_World_N_Q237,_Blob_Position_2_,_Blob_Intensity_,_Blob_Near_Size_2_,_Blob_Far_Size_,_Blob_Near_Distance_,_Blob_Far_Distance_,_Blob_Fade_Length_,_Blob_Pulse_2_,_Blob_Fade_2_,Blob_Info_Q225);
    } else {
      Blob_Info_Q225 = float4(0,0,0,0);
    }

    float Gradient1_Q235;
    float Gradient2_Q235;
    if (_Smooth_Edges_==1.0) {
      Edge_AA_Vertex_B235(Pos_World_Q206,vertexLocalPosition,vertexLocalNormal,vertexInput_Eye,Radial_Gradient_Q234,Radial_Dir_Q234,vertexLocalTangent,Gradient1_Q235,Gradient2_Q235);
    } else {
      Gradient1_Q235 = 1;
      Gradient2_Q235 = 1;
    }

    float2 Rect_UV_Q246;
    float4 Rect_Parms_Q246;
    float2 Scale_XY_Q246;
    float2 Line_UV_Q246;
    Round_Rect_Vertex_B246(New_UV_Q234,_Radius_,0,Anisotropy_Q238,Gradient1_Q235,Gradient2_Q235,Rect_UV_Q246,Rect_Parms_Q246,Scale_XY_Q246,Line_UV_Q246);

    float3 Line_Vertex_Q240;
    Line_Vertex_B240(Scale_XY_Q246,Line_UV_Q246,inputTime,_Rate_,_Highlight_Transform_,Line_Vertex_Q240);

    float3 Position = Pos_World_Q206;
    float3 Normal = Iridescence_Q223;
    float2 UV = Rect_UV_Q246;
    float3 Tangent = Line_Vertex_Q240;
    float3 Binormal = float3(0,0,0);
    float4 Color = float4(1,1,1,1);
    float4 Extra1 = Rect_Parms_Q246;
    float4 Extra2 = Blob_Info_Q224;
    float4 Extra3 = Blob_Info_Q225;


    huxVertexOutput_Normal = Normal;
    huxVertexOutput_UV = UV;
    huxVertexOutput_Tangent = Tangent;
    huxVertexOutput_Extra1 = Extra1;
    huxVertexOutput_Extra2 = Extra2;
    huxVertexOutput_Extra3 = Extra3;
    huxVertexOutput_Offset = Position-vertexWorldPosition;
	return huxVertexOutput_Offset;
}

//BLOCK_BEGIN Round_Rect_Fragment 239

void Round_Rect_Fragment_B239(
    half Radius,
    half Line_Width,
    half4 Line_Color,
    half Filter_Width,
    float2 UV,
    half Line_Visibility,
    half4 Rect_Parms,
    half4 Fill_Color,
    out half4 Color)
{
    float d = length(max(abs(UV)-Rect_Parms.xy,0.0));
    float dx = max(fwidth(d)*Filter_Width,0.00001);
    
    //float Inside_Rect = saturate((Radius-d)/dx);
    float g = min(Rect_Parms.z,Rect_Parms.w);
    float dgrad = max(fwidth(g)*Filter_Width,0.00001);
    float Inside_Rect = saturate(g/dgrad);
    
    //this is arguably more correct...
    //float inner = saturate((d+dx*0.5-max(Rect_Parms.z,d-dx*0.5))/dx);
    float inner = saturate((d+dx*0.5-max(Radius-Line_Width,d-dx*0.5))/dx);
    
    Color = saturate(lerp(Fill_Color, Line_Color,float4( inner, inner, inner, inner)))*Inside_Rect;
    //but this saves 3 ops
    //float inner = saturate((Rect_Parms.z-d)/dx);
    //Color = lerp(Line_Color*Line_Visibility, Fill_Color,float4( inner, inner, inner, inner))*Inside_Rect;
}
//BLOCK_END Round_Rect_Fragment

//BLOCK_BEGIN Line_Fragment 241

void Line_Fragment_B241(
    float4 Base_Color,
    float4 Highlight_Color,
    half Highlight_Width,
    half3 Line_Vertex,
    out float4 Line_Color)
{
    half k2 = saturate(abs(Line_Vertex.y/Highlight_Width));
    Line_Color = lerp(Highlight_Color,Base_Color,float4(k2,k2,k2,k2));
}
//BLOCK_END Line_Fragment

//BLOCK_BEGIN Blob_Fragment 244

void Blob_Fragment_B244(
    Texture2D Blob_Texture, SamplerState Blob_Texture_Sampler,
    float4 Blob_Info1,
    float4 Blob_Info2,
    out half4 Blob_Color)
{
    half k1 = dot(Blob_Info1.xy,Blob_Info1.xy);
    half k2 = dot(Blob_Info2.xy,Blob_Info2.xy);
    half3 closer = k1<k2 ? half3(k1,Blob_Info1.z,Blob_Info1.w) : half3(k2,Blob_Info2.z,Blob_Info2.w);
    Blob_Color = closer.z * Texture2DSample(Blob_Texture, Blob_Texture_Sampler, float2(sqrt(closer.x),closer.y))*saturate(1.0-closer.x);
    
}
//BLOCK_END Blob_Fragment


float4 Hushed_Fragment(
    FMaterialPixelParameters Parameters
    ,float _Radius_
    ,float _Line_Width_
    ,float _Filter_Width_
    ,float4 _Base_Color_
    ,float4 _Line_Color_
    ,float _Blob_Enable_
    ,Texture2D _Blob_Texture_, SamplerState _Blob_Texture_Sampler
    ,float4 _Highlight_Color_
    ,float _Highlight_Width_
    ,float _Fade_Out_
    ,int useGlobalLeftIndex
    ,int useGlobalRightIndex
    ,float4 globalLeftIndexTipPosition
    ,float4 globalRightIndexTipPosition

	,float3 fragInput_Normal
	,float2 fragInput_UV
	,float3 fragInput_Tangent
	,float4 fragInput_Extra1
	,float4 fragInput_Extra2
	,float4 fragInput_Extra3
)
{
    Use_Global_Left_Index_Int = useGlobalLeftIndex;
    Use_Global_Right_Index_Int = useGlobalRightIndex;
    Global_Left_Index_Tip_Position = globalLeftIndexTipPosition;
    Global_Right_Index_Tip_Position = globalRightIndexTipPosition;

    float4 Line_Color_Q241;
    Line_Fragment_B241(_Line_Color_,_Highlight_Color_,_Highlight_Width_,fragInput_Tangent,Line_Color_Q241);

    half4 Blob_Color_Q244;
    if (_Blob_Enable_==1.0) {
      Blob_Fragment_B244(_Blob_Texture_,_Blob_Texture_Sampler,fragInput_Extra2,fragInput_Extra3,Blob_Color_Q244);
    } else {
      Blob_Color_Q244 = half4(0,0,0,0);
    }

    // Add_Colors
    float4 Base_And_Iridescent_Q214;
    Base_And_Iridescent_Q214 = _Base_Color_ + float4(fragInput_Normal,0.0);
    
    // Blend_Over
    half4 Result_Q245 = Blob_Color_Q244 + (1.0 - Blob_Color_Q244.a) * Base_And_Iridescent_Q214;

    half4 Color_Q239;
    Round_Rect_Fragment_B239(_Radius_,_Line_Width_,Line_Color_Q241,_Filter_Width_,fragInput_UV,1,fragInput_Extra1,Result_Q245,Color_Q239);

    // Scale_Color
    float4 Result_Q226 = _Fade_Out_ * Color_Q239;

    float4 Out_Color = Result_Q226;
    float Clip_Threshold = 0.001;
    bool To_sRGB = false;

    return Out_Color;
}

#endif
