#ifndef HUSHED_VERTEX_FRAGMENT_SHADER
#define HUSHED_VERTEX_FRAGMENT_SHADER

static MaterialFloat4x4 HUX_OBJECT_TO_WORLD_POS_MATRIX;
static MaterialFloat3x3 ObjectToWorldDir;
#define Use_Global_Left_Index (Use_Global_Left_Index_Int!=0)
#define Use_Global_Right_Index (Use_Global_Right_Index_Int!=0)
static int Use_Global_Left_Index_Int;
static int Use_Global_Right_Index_Int;
static float4 Global_Left_Index_Tip_Position;
static float4 Global_Right_Index_Tip_Position;
static float4 Global_Left_Index_Middle_Position;
static float4 Global_Right_Index_Middle_Position;
static float4 Global_Left_Thumb_Tip_Position;
static float4 Global_Right_Thumb_Tip_Position;

//BLOCK_BEGIN Blob_Vertex 48

void Blob_Vertex_B48(
    float3 Position,
    float3 Normal,
    float3 Tangent,
    float3 Bitangent,
    float3 Blob_Position,
    float Intensity,
    float4 Near_Color,
    float4 Far_Color,
    float Blob_Near_Size,
    float Blob_Far_Size,
    float Blob_Near_Distance,
    float Blob_Far_Distance,
    float4 Vx_Color,
    float2 UV,
    float3 Face_Center,
    float2 Face_Size,
    float2 In_UV,
    float Blob_Fade_Length,
    float Inner_Fade,
    float Blob_Enabled,
    float Fade,
    float Pulse,
    float Visible,
    out float3 Out_Position,
    out float2 Out_UV,
    out float3 Blob_Info)
{
    
    float Hit_Distance = dot(Blob_Position-Face_Center, Normal);
    float3 Hit_Position = Blob_Position - Hit_Distance * Normal;
    
    float absD = abs(Hit_Distance);
    float lerpVal = clamp((absD-Blob_Near_Distance)/(Blob_Far_Distance-Blob_Near_Distance),0.0,1.0);
    float fadeIn = 1.0-clamp((absD-Blob_Far_Distance)/Blob_Fade_Length,0.0,1.0);
    
    //compute blob position & uv
    float3 delta = Hit_Position - Face_Center;
    float2 blobCenterXY = float2(dot(delta,Tangent),dot(delta,Bitangent));
    
    float innerFade = 1.0-clamp(-Hit_Distance/Inner_Fade,0.0,1.0);
    
    float size = lerp(Blob_Near_Size,Blob_Far_Size,lerpVal)*innerFade*Blob_Enabled*Visible;
    //float size = lerp(Blob_Near_Size,sqrt(max(0.0,radius*radius-Hit_Distance*Hit_Distance)),lerpVal);
    
    float2 quadUVin = 2.0*UV-1.0;  // remap to (-.5,.5)
    float2 blobXY = blobCenterXY+quadUVin*size;
    //keep the quad within the face
    float2 blobClipped = clamp(blobXY,-Face_Size*0.5,Face_Size*0.5);
    float2 blobUV = (blobClipped-blobCenterXY)/max(size,0.0001)*2.0;
    
    float3 blobCorner = Face_Center + blobClipped.x*Tangent + blobClipped.y*Bitangent;
    
    //blend using VxColor.r=1 for blob quad, 0 otherwise
    Out_Position = lerp(Position,blobCorner,Vx_Color.rrr);
    Out_UV = lerp(In_UV,blobUV,Vx_Color.rr);
    Blob_Info = float3((lerpVal*0.5+0.5)*(1.0-Pulse),Intensity*fadeIn*Fade,0.0);
    
}
//BLOCK_END Blob_Vertex

//BLOCK_BEGIN Object_To_World_Pos 45

void Object_To_World_Pos_B45(
    float3 Pos_Object,
    out float3 Pos_World)
{
    Pos_World=(mul(float4(Pos_Object,1.0),HUX_OBJECT_TO_WORLD_POS_MATRIX).xyz);
    
}
//BLOCK_END Object_To_World_Pos

//BLOCK_BEGIN Holo_Edge_Vertex 50

void Holo_Edge_Vertex_B50(
    float3 Normal,
    float2 UV,
    float3 Tangent,
    float3 Bitangent,
    float3 Incident,
    bool Hide_Faces,
    out float4 Holo_Edges)
{
    float NdotI = dot(Incident,Normal);
    float2 flip = (UV-float2(0.5,0.5));
    
    float udot = dot(Incident,Tangent)*flip.x*NdotI;
    float uval = (udot>0.0 && !Hide_Faces ? 0.0 : 1.0);
    
    float vdot = -dot(Incident,Bitangent)*flip.y*NdotI;
    float vval = (vdot>0.0 && !Hide_Faces ? 0.0 : 1.0);
    
    float frontside = NdotI<0.0 || Hide_Faces ? 1.0 : 0.0;
    //float smoothall = Hide_Faces ? 0.0 : 1.0;
    Holo_Edges = float4(1.0,1.0,1.0,1.0)-float4(uval*UV.x,uval*(1.0-UV.x),vval*UV.y,vval*(1.0-UV.y)) * frontside;
}
//BLOCK_END Holo_Edge_Vertex

//BLOCK_BEGIN Choose_Blob 43

void Choose_Blob_B43(
    float4 Vx_Color,
    float3 Position1,
    float3 Position2,
    bool Blob_Enable_1,
    bool Blob_Enable_2,
    float Near_Size_1,
    float Near_Size_2,
    float Blob_Inner_Fade_1,
    float Blob_Inner_Fade_2,
    float Blob_Pulse_1,
    float Blob_Pulse_2,
    float Blob_Fade_1,
    float Blob_Fade_2,
    out float3 Position,
    out float Near_Size,
    out float Inner_Fade,
    out float Blob_Enable,
    out float Fade,
    out float Pulse)
{
    float3 blob1 =  (Use_Global_Left_Index ? Global_Left_Index_Tip_Position.xyz :  Position1);
    float3 blob2 =  (Use_Global_Right_Index ? Global_Right_Index_Tip_Position.xyz :  Position2);
    
    Position = blob1*(1.0-Vx_Color.g)+Vx_Color.g*blob2;
    
    float b1 = Blob_Enable_1 ? 1.0 : 0.0;
    float b2 = Blob_Enable_2 ? 1.0 : 0.0;
    Blob_Enable = b1+(b2-b1)*Vx_Color.g;
    
    Pulse = Blob_Pulse_1*(1.0-Vx_Color.g)+Vx_Color.g*Blob_Pulse_2;
    Fade = Blob_Fade_1*(1.0-Vx_Color.g)+Vx_Color.g*Blob_Fade_2;
    Near_Size = Near_Size_1*(1.0-Vx_Color.g)+Vx_Color.g*Near_Size_2;
    Inner_Fade = Blob_Inner_Fade_1*(1.0-Vx_Color.g)+Vx_Color.g*Blob_Inner_Fade_2;
}
//BLOCK_END Choose_Blob

//BLOCK_BEGIN Wireframe_Vertex 35

void Wireframe_Vertex_B35(
    float3 Position,
    float3 Normal,
    float3 Tangent,
    float3 Bitangent,
    float3 Tangent_World,
    float3 Bitangent_World,
    float Edge_Width,
    out float3 Result,
    out float2 UV,
    out float2 Widths,
    out float2 Face_Size)
{
    Face_Size = float2(length(Tangent_World),length(Bitangent_World));
    Widths.xy = Edge_Width/Face_Size;
    
    float x = dot(Position,Tangent);
    float y = dot(Position,Bitangent);
    
    float dx = 0.5-abs(x);
    float newx = (0.5 - dx * Widths.x * 2.0)*sign(x);
    
    float dy = 0.5-abs(y);
    float newy = (0.5 - dy * Widths.y * 2.0)*sign(y);
    
    Result = Normal * 0.5 + newx * Tangent + newy * Bitangent;
    
    UV.x = dot(Result,Tangent) + 0.5;
    UV.y = dot(Result,Bitangent) + 0.5;
}
//BLOCK_END Wireframe_Vertex

//BLOCK_BEGIN Object_To_World_Dir 36

void Object_To_World_Dir_B36(
    float3 Dir_Object,
    out float3 Dir_World)
{
    Dir_World=(mul(Dir_Object, ObjectToWorldDir));
}
//BLOCK_END Object_To_World_Dir

//BLOCK_BEGIN Object_To_World_Dir 62

void Object_To_World_Dir_B62(
    float3 Nrm_Object,
    out float3 Nrm_World)
{
    Nrm_World=(mul(Nrm_Object, ObjectToWorldDir));
}
//BLOCK_END Object_To_World_Dir

//BLOCK_BEGIN ComputeWidth 60

void ComputeWidth_B60(
    float3 Eye,
    float3 Model_Center,
    float Near_Width,
    float Far_Width,
    float Near_Distance,
    float Far_Distance,
    out float Width)
{
    float d = distance(Model_Center, Eye);
    float k = saturate((d-Near_Distance)/(Far_Distance-Near_Distance));
    Width = lerp(Near_Width, Far_Width, k);
    
}
//BLOCK_END ComputeWidth


static float3 huxVertexOutput_Normal;
static float2 huxVertexOutput_UV;
static float3 huxVertexOutput_Tangent;
static float3 huxVertexOutput_Binormal;
static float4 huxVertexOutput_Extra1;
static float3 huxVertexOutput_Offset;

float3 Hushed_Vertex(
    FMaterialVertexParameters Parameters
    ,float _Near_Width_
    ,float _Far_Width_
    ,float _Near_Distance_
    ,float _Far_Distance_
    ,bool _Blob_Enable_
    ,float3 _Blob_Position_
    ,float _Blob_Intensity_
    ,float _Blob_Near_Size_
    ,float _Blob_Far_Size_
    ,float _Blob_Near_Distance_
    ,float _Blob_Far_Distance_
    ,float _Blob_Fade_Length_
    ,float _Blob_Inner_Fade_
    ,float _Blob_Pulse_
    ,float _Blob_Fade_
    ,bool _Blob_Enable_2_
    ,float3 _Blob_Position_2_
    ,float _Blob_Near_Size_2_
    ,float _Blob_Inner_Fade_2_
    ,float _Blob_Pulse_2_
    ,float _Blob_Fade_2_
    ,float3 _Center_
    ,bool _Hide_XY_Faces_
    ,int useGlobalLeftIndex
    ,int useGlobalRightIndex
    ,float4 globalLeftIndexTipPosition
    ,float4 globalRightIndexTipPosition

	,float2 vertexInput_UV
	,float3 vertexInput_Eye
	,float4 vertexInput_Color
)
{
    float3 vertexWorldPosition = GetWorldPosition(Parameters);
    //float3 vertexLocalPosition = mul(float4(vertexWorldPosition, 1), GetPrimitiveData(Parameters.PrimitiveId).WorldToLocal).xyz;
    float3 vertexLocalPosition = Parameters.PreSkinnedPosition;
	//float3 worldNormal = Parameters.WorldNormal; //mul(MaterialFloat3(1.00000000,0.00000000,0.00000000), (MaterialFloat3x3)(Parameters.TangentToWorld));
	//float3 vertexLocalNormal = mul(worldNormal,(MaterialFloat3x3)(GetPrimitiveData(Parameters.PrimitiveId).WorldToLocal));
    float3 vertexLocalNormal = Parameters.PreSkinnedNormal;
	float3 worldTangent = Parameters.TangentToWorld[0];
	float3 vertexLocalTangent = normalize(mul(worldTangent,(MaterialFloat3x3)(GetPrimitiveData(Parameters.PrimitiveId).WorldToLocal)));
    //float3 vertexLocalTangent = Parameters.TangentToLocal[0];
	float3 worldBinormal = Parameters.TangentToWorld[1];
	float3 vertexLocalBinormal = normalize(mul(worldBinormal,(MaterialFloat3x3)(GetPrimitiveData(Parameters.PrimitiveId).WorldToLocal)));
    //float3 vertexLocalBinormal = Parameters.TangentToLocal[1];

    #if USE_INSTANCING || IS_MESHPARTICLE_FACTORY
    ObjectToWorldDir = (MaterialFloat3x3)Parameters.InstanceLocalToWorld;
    #else
    ObjectToWorldDir = GetLocalToWorld3x3(Parameters.PrimitiveId);
    #endif

    HUX_OBJECT_TO_WORLD_POS_MATRIX = GetPrimitiveData(Parameters.PrimitiveId).LocalToWorld;

    Use_Global_Left_Index_Int = useGlobalLeftIndex;
    Use_Global_Right_Index_Int = useGlobalRightIndex;
    Global_Left_Index_Tip_Position = globalLeftIndexTipPosition;
    Global_Right_Index_Tip_Position = globalRightIndexTipPosition;

    float3 Pos_World_Q45;
    Object_To_World_Pos_B45(_Center_,Pos_World_Q45);

    float3 Position_Q43;
    float Near_Size_Q43;
    float Inner_Fade_Q43;
    float Blob_Enable_Q43;
    float Fade_Q43;
    float Pulse_Q43;
    Choose_Blob_B43(vertexInput_Color,_Blob_Position_,_Blob_Position_2_,_Blob_Enable_,_Blob_Enable_2_,_Blob_Near_Size_,_Blob_Near_Size_2_,_Blob_Inner_Fade_,_Blob_Inner_Fade_2_,_Blob_Pulse_,_Blob_Pulse_2_,_Blob_Fade_,_Blob_Fade_2_,Position_Q43,Near_Size_Q43,Inner_Fade_Q43,Blob_Enable_Q43,Fade_Q43,Pulse_Q43);

    // Hide_Faces
    float Visible_Q47 = _Hide_XY_Faces_ ? abs(vertexLocalNormal.z) : 1.0;

    float3 Dir_World_Q36;
    Object_To_World_Dir_B36(vertexLocalTangent,Dir_World_Q36);

    float3 Dir_World_Q37;
    Object_To_World_Dir_B36(vertexLocalBinormal,Dir_World_Q37);

    // To_RGBA
    float R_Q18;
    float G_Q18;
    float B_Q18;
    float A_Q18;
    R_Q18=vertexInput_Color.r; G_Q18=vertexInput_Color.g; B_Q18=vertexInput_Color.b; A_Q18=vertexInput_Color.a;

    float3 Nrm_World_Q62;
    Object_To_World_Dir_B62(vertexLocalNormal,Nrm_World_Q62);

    // Scale3
    float3 Result_Q23 = 0.5 * vertexLocalNormal;

    float3 Pos_World_Q59;
    Object_To_World_Pos_B45(float3(0,0,0),Pos_World_Q59);

    // Normalize3
    float3 Normalized_Q21 = normalize(Nrm_World_Q62);

    // Normalize3
    float3 Normalized_Q19 = normalize(Dir_World_Q36);

    // Normalize3
    float3 Normalized_Q20 = normalize(Dir_World_Q37);

    float3 Pos_World_Q22;
    Object_To_World_Pos_B45(Result_Q23,Pos_World_Q22);

    float Width_Q60;
    ComputeWidth_B60(vertexInput_Eye,Pos_World_Q59,_Near_Width_,_Far_Width_,_Near_Distance_,_Far_Distance_,Width_Q60);

    float3 Result_Q35;
    float2 UV_Q35;
    float2 Widths_Q35;
    float2 Face_Size_Q35;
    Wireframe_Vertex_B35(vertexLocalPosition,vertexLocalNormal,vertexLocalTangent,vertexLocalBinormal,Dir_World_Q36,Dir_World_Q37,Width_Q60,Result_Q35,UV_Q35,Widths_Q35,Face_Size_Q35);

    // Scale3
    float3 Result_Q46 = Visible_Q47 * Result_Q35;

    // Pack_For_Vertex
    float3 Vec3_Q24 = float3(Widths_Q35.x,Widths_Q35.y,R_Q18);

    float3 Pos_World_Q13;
    Object_To_World_Pos_B45(Result_Q46,Pos_World_Q13);

    // Incident3
    float3 Incident_Q34 = normalize(Pos_World_Q13-vertexInput_Eye);

    float3 Out_Position_Q48;
    float2 Out_UV_Q48;
    float3 Blob_Info_Q48;
    Blob_Vertex_B48(Pos_World_Q13,Normalized_Q21,Normalized_Q19,Normalized_Q20,Position_Q43,_Blob_Intensity_,float4(0.41,0,0.216,1),float4(0,0.089,1,1),Near_Size_Q43,_Blob_Far_Size_,_Blob_Near_Distance_,_Blob_Far_Distance_,vertexInput_Color,vertexInput_UV,Pos_World_Q22,Face_Size_Q35,UV_Q35,_Blob_Fade_Length_,Inner_Fade_Q43,Blob_Enable_Q43,Fade_Q43,Pulse_Q43,Visible_Q47,Out_Position_Q48,Out_UV_Q48,Blob_Info_Q48);

    float4 Holo_Edges_Q50;
    Holo_Edge_Vertex_B50(Normalized_Q21,vertexInput_UV,Dir_World_Q36,Dir_World_Q37,Incident_Q34,_Hide_XY_Faces_,Holo_Edges_Q50);

    float3 Position = Out_Position_Q48;
    float2 UV = Out_UV_Q48;
    float3 Tangent = Pos_World_Q45;
    float3 Binormal = Blob_Info_Q48;
    float4 Color = float4(1,1,1,1);
    float4 Extra1 = Holo_Edges_Q50;
    float3 Normal = Vec3_Q24;


    huxVertexOutput_Normal = Normal;
    huxVertexOutput_UV = UV;
    huxVertexOutput_Tangent = Tangent;
    huxVertexOutput_Binormal = Binormal;
    huxVertexOutput_Extra1 = Extra1;
    huxVertexOutput_Offset = Position-vertexWorldPosition;
	return huxVertexOutput_Offset;
}

//BLOCK_BEGIN Holo_Edge_Fragment 38

void Holo_Edge_Fragment_B38(
    float Edge_Width,
    float4 Edges,
    out float NotEdge)
{
    float2 c = float2(min(Edges.x,Edges.y),min(Edges.z,Edges.w));
    float2 df = fwidth(c)*Edge_Width;
    float2 g = saturate(c/df);
    NotEdge = g.x*g.y;
}
//BLOCK_END Holo_Edge_Fragment

//BLOCK_BEGIN Blob_Fragment 41

void Blob_Fragment_B41(
    Texture2D Blob_Texture, SamplerState Blob_Texture_Sampler,
    float2 UV,
    float3 Blob_Info,
    out float4 Blob_Color)
{
    float k = dot(UV,UV);
    Blob_Color = Blob_Info.y * Texture2DSample(Blob_Texture, Blob_Texture_Sampler, float2(sqrt(k),Blob_Info.x))*(1.0-saturate(k));
}
//BLOCK_END Blob_Fragment

//BLOCK_BEGIN Transition 54

float tramp(float start, float end, float x)
{
    return smoothstep(start,end,x);
//    return saturate((x-start)/(end-start));
}

void Transition_B54(
    float3 Position,
    float Time,
    float3 Center,
    float Transition,
    float Radius,
    float Fuzz,
    float Start_Time,
    float Speed,
    float4 Flash_Color,
    float4 Trim_Color,
    bool Invert,
    float Edge_Weight,
    out float Trans_Intensity,
    out float4 Flash)
{
    float t = Invert ? 1.0-Transition : Transition;
    t = Start_Time>0.0 ? clamp((Time-Start_Time)/Speed,0.0,1.0) : t;
    
    float d = distance(Center,Position);
    float k = t * Radius;
    float s1 = tramp(k-Fuzz-Fuzz,k-Fuzz,d);
    float s2 = tramp(k-Fuzz,k,d);
    
    float s = saturate(s1-s2);
    Trans_Intensity = Invert ? s1 : 1.0-s1;
    //Trans_Intensity = 1; //sqrt(Trans_Intensity);
    
    Flash = Edge_Weight*s*lerp(Trim_Color,Flash_Color,float4(s,s,s,s));
}
//BLOCK_END Transition

//BLOCK_BEGIN Wireframe_Fragment 55

float2 FilterStep(float2 Edge, float2 X)
{
    // note we are in effect doubling the filter width
    float2 dX = max(fwidth(X),float2(0.00001,0.00001));
    return saturate( (X+dX - max(Edge,X-dX))/(dX*2.0));
}

void Wireframe_Fragment_B55(
    float3 Widths,
    float2 UV,
    out float Edge)
{
    float2 c = min(UV,float2(1.0,1.0)-UV);
    float2 g = FilterStep(Widths.xy,c); 
    Edge = 1.0-min(g.x,g.y);
    
}
//BLOCK_END Wireframe_Fragment

//BLOCK_BEGIN Proximity 44

void Proximity_B44(
    float3 Position,
    float3 Proximity_Center,
    float3 Proximity_Center_2,
    float Proximity_Max_Intensity,
    float Proximity_Far_Radius,
    float Proximity_Near_Radius,
    out float Proximity)
{
    float3 blob1 =  (Use_Global_Left_Index ? Global_Left_Index_Tip_Position.xyz :  Proximity_Center);
    float3 blob2 =  (Use_Global_Right_Index ? Global_Right_Index_Tip_Position.xyz :  Proximity_Center_2);
    
    float3 delta1 = blob1-Position;
    float3 delta2 = blob2-Position;
    
    float d2 = sqrt(min(dot(delta1,delta1),dot(delta2,delta2)));
    Proximity = Proximity_Max_Intensity * (1.0-saturate((d2-Proximity_Near_Radius)/(Proximity_Far_Radius-Proximity_Near_Radius)));
}
//BLOCK_END Proximity


float4 Hushed_Fragment(
    FMaterialPixelParameters Parameters
    ,float4 _Edge_Color_
    ,float _Proximity_Max_Intensity_
    ,float _Proximity_Far_Radius_
    ,float _Proximity_Near_Radius_
    ,float3 _Blob_Position_
    ,Texture2D _Blob_Texture_, SamplerState _Blob_Texture_Sampler
    ,float3 _Blob_Position_2_
    ,float _Enable_Transition_
    ,float _Transition_
    ,float _Radius_
    ,float _Fuzz_
    ,float _Start_Time_
    ,float _Transition_Period_
    ,float4 _Flash_Color_
    ,float4 _Trim_Color_
    ,bool _Invert_
    ,float _Enable_Fade_
    ,float _Fade_Width_
    ,bool _Show_Frame_
    ,int useGlobalLeftIndex
    ,int useGlobalRightIndex
    ,float4 globalLeftIndexTipPosition
    ,float4 globalRightIndexTipPosition

	,float3 fragInput_Position
	,float3 fragInput_Normal
	,float2 fragInput_UV
	,float3 fragInput_Tangent
	,float3 fragInput_Binormal
	,float inputTime
	,float4 fragInput_Extra1
)
{
    Use_Global_Left_Index_Int = useGlobalLeftIndex;
    Use_Global_Right_Index_Int = useGlobalRightIndex;
    Global_Left_Index_Tip_Position = globalLeftIndexTipPosition;
    Global_Right_Index_Tip_Position = globalRightIndexTipPosition;

    float NotEdge_Q38;
    if (_Enable_Fade_==1.0) {
      Holo_Edge_Fragment_B38(_Fade_Width_,fragInput_Extra1,NotEdge_Q38);
    } else {
      NotEdge_Q38 = 1;
    }

    float4 Blob_Color_Q41;
    Blob_Fragment_B41(_Blob_Texture_,_Blob_Texture_Sampler,fragInput_UV,fragInput_Binormal,Blob_Color_Q41);

    // To_XYZ
    float X_Q33;
    float Y_Q33;
    float Z_Q33;
    X_Q33=fragInput_Normal.x;
    Y_Q33=fragInput_Normal.y;
    Z_Q33=fragInput_Normal.z;

    float Edge_Q55;
    Wireframe_Fragment_B55(fragInput_Normal,fragInput_UV,Edge_Q55);

    float Proximity_Q44;
    Proximity_B44(fragInput_Position,_Blob_Position_,_Blob_Position_2_,_Proximity_Max_Intensity_,_Proximity_Far_Radius_,_Proximity_Near_Radius_,Proximity_Q44);

    float Trans_Intensity_Q54;
    float4 Flash_Q54;
    if (_Enable_Transition_==1.0) {
      Transition_B54(fragInput_Position,inputTime,fragInput_Tangent,_Transition_,_Radius_,_Fuzz_,_Start_Time_,_Transition_Period_,_Flash_Color_,_Trim_Color_,_Invert_,Edge_Q55,Trans_Intensity_Q54,Flash_Q54);
    } else {
      Trans_Intensity_Q54 = 0;
      Flash_Q54 = float4(0,0,0,0);
    }

    // Max
    float MaxAB_Q30=max(Proximity_Q44,Trans_Intensity_Q54);

    // Multiply
    float Edge_Intensity_Q40 = Edge_Q55 * MaxAB_Q30;

    // Add_Scaled_Color
    float4 Wire_Color_Q32 = Flash_Q54 + Edge_Intensity_Q40 * _Edge_Color_;

    // Mix_Colors
    float4 Color_At_T_Q31 = lerp(Wire_Color_Q32, Blob_Color_Q41,float4( Z_Q33, Z_Q33, Z_Q33, Z_Q33));

    // Conditional_Color
    float4 Result_Q39 = _Show_Frame_ ? float4(0.3,0.3,0.3,0.3) : Color_At_T_Q31;

    // Scale_Color
    float4 Result_Q17 = NotEdge_Q38 * Result_Q39;

    float4 Out_Color = Result_Q17;
    float Clip_Threshold = 0;
    bool To_sRGB = false;

    return Out_Color;
}

#endif
