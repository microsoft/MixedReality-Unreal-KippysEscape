#ifndef HUSHED_VERTEX_FRAGMENT_SHADER
#define HUSHED_VERTEX_FRAGMENT_SHADER

static MaterialFloat4x4 HUX_OBJECT_TO_WORLD_POS_MATRIX;
static MaterialFloat3x3 ObjectToWorldDir;
#define Use_Global_Left_Index (Use_Global_Left_Index_Int!=0)
#define Use_Global_Right_Index (Use_Global_Right_Index_Int!=0)
static int Use_Global_Left_Index_Int;
static int Use_Global_Right_Index_Int;
static float4 Global_Left_Index_Tip_Position;
static float4 Global_Right_Index_Tip_Position;
static float4 Global_Left_Index_Middle_Position;
static float4 Global_Right_Index_Middle_Position;
static float4 Global_Left_Thumb_Tip_Position;
static float4 Global_Right_Thumb_Tip_Position;
static float  Global_Left_Index_Tip_Proximity;
static float  Global_Right_Index_Tip_Proximity;

//BLOCK_BEGIN Blob_Vertex 344

void Blob_Vertex_B344(
    float3 Position,
    float3 Normal,
    float3 Tangent,
    float3 Bitangent,
    float3 Blob_Position,
    float Intensity,
    float Blob_Near_Size,
    float Blob_Far_Size,
    float Blob_Near_Distance,
    float Blob_Far_Distance,
    float4 Vx_Color,
    float2 UV,
    float3 Face_Center,
    float2 Face_Size,
    float2 In_UV,
    float Blob_Fade_Length,
    float Selection_Fade,
    float Selection_Fade_Size,
    float Inner_Fade,
    float3 Active_Face_Center,
    float Blob_Pulse,
    float Blob_Fade,
    float Blob_Enabled,
    out float3 Out_Position,
    out float2 Out_UV,
    out float3 Blob_Info)
{
    
    float blobSize, fadeIn;
    float3 Hit_Position;
    Blob_Info = float3(0.0,0.0,0.0);
    
    float Hit_Distance = dot(Blob_Position-Face_Center, Normal);
    Hit_Position = Blob_Position - Hit_Distance * Normal;
    
    float absD = abs(Hit_Distance);
    float lerpVal = clamp((absD-Blob_Near_Distance)/(Blob_Far_Distance-Blob_Near_Distance),0.0,1.0);
    fadeIn = 1.0-clamp((absD-Blob_Far_Distance)/Blob_Fade_Length,0.0,1.0);
    
    float innerFade = 1.0-clamp(-Hit_Distance/Inner_Fade,0.0,1.0);
    
    //compute blob size
    float farClip = saturate(1.0-step(Blob_Far_Distance+Blob_Fade_Length,absD));
    float size = lerp(Blob_Near_Size,Blob_Far_Size,lerpVal)*farClip;
    blobSize = lerp(size,Selection_Fade_Size,Selection_Fade)*innerFade*Blob_Enabled;
    Blob_Info.x = lerpVal*0.5+0.5;
        
    Blob_Info.y = fadeIn*Intensity*(1.0-Selection_Fade)*Blob_Fade;
    Blob_Info.x *= (1.0-Blob_Pulse);
    
    //compute blob position
    float3 delta = Hit_Position - Face_Center;
    float2 blobCenterXY = float2(dot(delta,Tangent),dot(delta,Bitangent));
    
    float2 quadUVin = 2.0*UV-1.0;  // remap to (-.5,.5)
    float2 blobXY = blobCenterXY+quadUVin*blobSize;
    
    //keep the quad within the face
    float2 blobClipped = clamp(blobXY,-Face_Size*0.5,Face_Size*0.5);
    float2 blobUV = (blobClipped-blobCenterXY)/max(blobSize,0.0001)*2.0;
    
    float3 blobCorner = Face_Center + blobClipped.x*Tangent + blobClipped.y*Bitangent;
    
    //blend using VxColor.r=1 for blob quad, 0 otherwise
    Out_Position = lerp(Position,blobCorner,Vx_Color.rrr);
    Out_UV = lerp(In_UV,blobUV,Vx_Color.rr);
    
}
//BLOCK_END Blob_Vertex

//BLOCK_BEGIN Proximity_Vertex 363

float2 ProjectProximity(
    float3 blobPosition,
    float3 position,
    float3 center,
    float3 dir,
    float3 xdir,
    float3 ydir,
    out float vdistance
)
{
    float3 delta = blobPosition - position;
    float2 xy = float2(dot(delta,xdir),dot(delta,ydir));
    vdistance = abs(dot(delta,dir));
    return xy;
}

void Proximity_Vertex_B363(
    float3 Blob_Position,
    float3 Blob_Position_2,
    float3 Active_Face_Center,
    float3 Active_Face_Dir,
    float3 Position,
    float Proximity_Far_Distance,
    float Relative_Scale,
    float Proximity_Anisotropy,
    float3 Up,
    out float4 Extra1,
    out float Distance_To_Face,
    out float Intensity)
{
    float3 Active_Face_Dir_X = normalize(cross(Active_Face_Dir,Up));
    //float3 Active_Face_Dir_X = normalize(float3(Active_Face_Dir.y-Active_Face_Dir.z,Active_Face_Dir.z-Active_Face_Dir.x,Active_Face_Dir.x-Active_Face_Dir.y));
    float3 Active_Face_Dir_Y = cross(Active_Face_Dir,Active_Face_Dir_X);
    
    float distz1,distz2;
    Extra1.xy = ProjectProximity(Blob_Position,Position,Active_Face_Center,Active_Face_Dir,Active_Face_Dir_X*Proximity_Anisotropy,Active_Face_Dir_Y,distz1)/Relative_Scale;
    Extra1.zw = ProjectProximity(Blob_Position_2,Position,Active_Face_Center,Active_Face_Dir,Active_Face_Dir_X*Proximity_Anisotropy,Active_Face_Dir_Y,distz2)/Relative_Scale;
    
    Distance_To_Face = dot(Active_Face_Dir,Position-Active_Face_Center);
    Intensity = 1.0 - saturate(min(distz1,distz2)/Proximity_Far_Distance);
    
}
//BLOCK_END Proximity_Vertex

//BLOCK_BEGIN Holo_Edge_Vertex 341

void Holo_Edge_Vertex_B341(
    float3 Incident,
    float3 Normal,
    float2 UV,
    float3 Tangent,
    float3 Bitangent,
    bool Smooth_Active_Face,
    float Active,
    out float4 Holo_Edges)
{
    float NdotI = dot(Incident,Normal);
    
    float2 flip = (UV-float2(0.5,0.5));
    float udot = dot(Incident,Tangent)*flip.x*NdotI;
    float uval = (udot>0.0 ? 0.0 : 1.0);
    
    float vdot = -dot(Incident,Bitangent)*flip.y*NdotI;
    float vval = (vdot>0.0 ? 0.0 : 1.0);
    
    if (Smooth_Active_Face && Active>0.0) {
         float d = 1.0; //abs(dot(Normal,Incident));
         uval=max(d,uval); vval=max(d,vval);
    }
    Holo_Edges = float4(1.0,1.0,1.0,1.0)-float4(uval*UV.x,uval*(1.0-UV.x),vval*UV.y,vval*(1.0-UV.y));
}
//BLOCK_END Holo_Edge_Vertex

//BLOCK_BEGIN Object_To_World_Pos 309

void Object_To_World_Pos_B309(
    float3 Pos_Object,
    out float3 Pos_World)
{
    Pos_World=(mul(float4(Pos_Object,1.0),HUX_OBJECT_TO_WORLD_POS_MATRIX).xyz);
    
}
//BLOCK_END Object_To_World_Pos

//BLOCK_BEGIN Choose_Blob 335

void Choose_Blob_B335(
    float4 Vx_Color,
    float3 Position1,
    float3 Position2,
    bool Blob_Enable_1,
    bool Blob_Enable_2,
    float Near_Size_1,
    float Near_Size_2,
    float Blob_Inner_Fade_1,
    float Blob_Inner_Fade_2,
    float Blob_Pulse_1,
    float Blob_Pulse_2,
    float Blob_Fade_1,
    float Blob_Fade_2,
    out float3 Position,
    out float Near_Size,
    out float Inner_Fade,
    out float Blob_Enable,
    out float Fade,
    out float Pulse)
{
    Position = Position1*(1.0-Vx_Color.g)+Vx_Color.g*Position2;
    
    float b1 = Blob_Enable_1 ? 1.0 : 0.0;
    float b2 = Blob_Enable_2 ? 1.0 : 0.0;
    Blob_Enable = b1+(b2-b1)*Vx_Color.g;
    
    Pulse = Blob_Pulse_1*(1.0-Vx_Color.g)+Vx_Color.g*Blob_Pulse_2;
    Fade = Blob_Fade_1*(1.0-Vx_Color.g)+Vx_Color.g*Blob_Fade_2;
    Near_Size = Near_Size_1*(1.0-Vx_Color.g)+Vx_Color.g*Near_Size_2;
    Inner_Fade = Blob_Inner_Fade_1*(1.0-Vx_Color.g)+Vx_Color.g*Blob_Inner_Fade_2;
}
//BLOCK_END Choose_Blob

//BLOCK_BEGIN Wireframe_Vertex 348

void Wireframe_Vertex_B348(
    float3 Position,
    float3 Normal,
    float3 Tangent,
    float3 Bitangent,
    float Edge_Width,
    float2 Face_Size,
    out float3 Wire_Vx_Pos,
    out float2 UV,
    out float2 Widths)
{
    Widths.xy = Edge_Width/Face_Size;
    
    float x = dot(Position,Tangent);
    float y = dot(Position,Bitangent);
    
    float dx = 0.5-abs(x);
    float newx = (0.5 - dx * Widths.x * 2.0)*sign(x);
    
    float dy = 0.5-abs(y);
    float newy = (0.5 - dy * Widths.y * 2.0)*sign(y);
    
    Wire_Vx_Pos = Normal * 0.5 + newx * Tangent + newy * Bitangent;
    
    UV.x = dot(Wire_Vx_Pos,Tangent) + 0.5;
    UV.y = dot(Wire_Vx_Pos,Bitangent) + 0.5;
}
//BLOCK_END Wireframe_Vertex

//BLOCK_BEGIN Selection_Vertex 345

float2 ramp2(float2 start, float2 end, float2 x)
{
   return clamp((x-start)/(end-start),float2(0.0,0.0),float2(1.0,1.0));
}

float computeSelection(
    float3 blobPosition,
    float3 normal,
    float3 tangent,
    float3 bitangent,
    float3 faceCenter,
    float2 faceSize,
    float selectionFuzz,
    float farDistance,
    float fadeLength
)
{
    float3 delta = blobPosition - faceCenter;
    float absD = abs(dot(delta,normal));
    float fadeIn = 1.0-clamp((absD-farDistance)/fadeLength,0.0,1.0);
    
    float2 blobCenterXY = float2(dot(delta,tangent),dot(delta,bitangent));

    float2 innerFace = faceSize * (1.0-selectionFuzz) * 0.5;
    float2 selectPulse = ramp2(-faceSize*0.5,-innerFace,blobCenterXY)-ramp2(innerFace,faceSize*0.5,blobCenterXY);

    return selectPulse.x * selectPulse.y * fadeIn;
}

void Selection_Vertex_B345(
    float3 Blob_Position,
    float3 Blob_Position_2,
    float3 Face_Center,
    float2 Face_Size,
    float3 Normal,
    float3 Tangent,
    float3 Bitangent,
    float Selection_Fuzz,
    float Selected,
    float Far_Distance,
    float Fade_Length,
    float3 Active_Face_Dir,
    out float Show_Selection)
{
    float select1 = computeSelection(Blob_Position,Normal,Tangent,Bitangent,Face_Center,Face_Size,Selection_Fuzz,Far_Distance,Fade_Length);
    float select2 = computeSelection(Blob_Position_2,Normal,Tangent,Bitangent,Face_Center,Face_Size,Selection_Fuzz,Far_Distance,Fade_Length);
    
    float Active = max(0.0,dot(Active_Face_Dir,Normal));
    
    Show_Selection = lerp(max(select1,select2),1.0,Selected)*Active;
}
//BLOCK_END Selection_Vertex

//BLOCK_BEGIN Proximity_Visibility 351

void Proximity_Visibility_B351(
    float Selection,
    float3 Proximity_Center,
    float3 Proximity_Center_2,
    float Input_Width,
    float Proximity_Far_Distance,
    float Proximity_Radius,
    float3 Active_Face_Center,
    float3 Active_Face_Dir,
    out float Width)
{
    //make all edges invisible if no proximity or selection visible
    float3 boxEdges = (mul(float3(0.5,0.5,0.5), ObjectToWorldDir));
    float boxMaxSize = length(boxEdges);
    
    float d1 = dot(Proximity_Center-Active_Face_Center, Active_Face_Dir);
    float3 blob1 = Proximity_Center - d1 * Active_Face_Dir;
    
    float d2 = dot(Proximity_Center_2-Active_Face_Center, Active_Face_Dir);
    float3 blob2 = Proximity_Center_2 - d2 * Active_Face_Dir;
    
    //float3 objectOriginInWorld = (mul(float4(float3(0.0,0.0,0.0),1.0),HUX_OBJECT_TO_WORLD_POS_MATRIX).xyz);
    float3 delta1 = blob1 - Active_Face_Center;
    float3 delta2 = blob2 - Active_Face_Center;
    
    float dist1 = dot(delta1,delta1);
    float dist2 = dot(delta2,delta2);
    
    float nearestProxDist = sqrt(min(dist1,dist2));
    
    //Width = Input_Width * (1.0 - step(boxMaxSize+Proximity_Radius,nearestProxDist)*(1.0-step(Selection,0.0)));
    Width = Input_Width * (1.0 - step(boxMaxSize+Proximity_Radius,nearestProxDist))*(1.0-step(Proximity_Far_Distance,min(d1,d2))*(1.0-step(0.0001,Selection)));
    
}
//BLOCK_END Proximity_Visibility

//BLOCK_BEGIN Object_To_World_Dir 364

void Object_To_World_Dir_B364(
    float3 Dir_Object,
    out float3 Dir_World)
{
    Dir_World=(mul(Dir_Object, ObjectToWorldDir));
    
}
//BLOCK_END Object_To_World_Dir


static float3 huxVertexOutput_Normal;
static float2 huxVertexOutput_UV;
static float3 huxVertexOutput_Tangent;
static float3 huxVertexOutput_Binormal;
static float4 huxVertexOutput_Color;
static float4 huxVertexOutput_Extra1;
static float3 huxVertexOutput_Offset;

float3 Hushed_Vertex(
    FMaterialVertexParameters Parameters
    ,float _Edge_Width_
    ,float _Relative_Width_
    ,float _Proximity_Far_Distance_
    ,float _Proximity_Near_Radius_
    ,float _Proximity_Anisotropy_
    ,float _Selection_Fuzz_
    ,float _Selected_
    ,float _Selection_Fade_
    ,float _Selection_Fade_Size_
    ,float _Selected_Distance_
    ,float _Selected_Fade_Length_
    ,bool _Blob_Enable_
    ,float3 _Blob_Position_
    ,float _Blob_Intensity_
    ,float _Blob_Near_Size_
    ,float _Blob_Far_Size_
    ,float _Blob_Near_Distance_
    ,float _Blob_Far_Distance_
    ,float _Blob_Fade_Length_
    ,float _Blob_Inner_Fade_
    ,float _Blob_Pulse_
    ,float _Blob_Fade_
    ,bool _Blob_Enable_2_
    ,float3 _Blob_Position_2_
    ,float _Blob_Near_Size_2_
    ,float _Blob_Inner_Fade_2_
    ,float _Blob_Pulse_2_
    ,float _Blob_Fade_2_
    ,float3 _Active_Face_Dir_
    ,float3 _Active_Face_Up_
    ,bool _Smooth_Active_Face_
    ,int useGlobalLeftIndex
    ,int useGlobalRightIndex
    ,float4 globalLeftIndexTipPosition
    ,float4 globalRightIndexTipPosition

	,float2 vertexInput_UV
	,float3 vertexInput_Eye
	,float4 vertexInput_Color
)
{
    float3 vertexWorldPosition = GetWorldPosition(Parameters);
    //float3 vertexLocalPosition = mul(float4(vertexWorldPosition, 1), GetPrimitiveData(Parameters.PrimitiveId).WorldToLocal).xyz;
    float3 vertexLocalPosition = Parameters.PreSkinnedPosition;
	//float3 worldNormal = Parameters.WorldNormal; //mul(MaterialFloat3(1.00000000,0.00000000,0.00000000), (MaterialFloat3x3)(Parameters.TangentToWorld));
	//float3 vertexLocalNormal = mul(worldNormal,(MaterialFloat3x3)(GetPrimitiveData(Parameters.PrimitiveId).WorldToLocal));
    float3 vertexLocalNormal = Parameters.PreSkinnedNormal;
	float3 worldTangent = Parameters.TangentToWorld[0];
	float3 vertexLocalTangent = normalize(mul(worldTangent,(MaterialFloat3x3)(GetPrimitiveData(Parameters.PrimitiveId).WorldToLocal)));
	float3 worldBinormal = Parameters.TangentToWorld[1];
	float3 vertexLocalBinormal = normalize(mul(worldBinormal,(MaterialFloat3x3)(GetPrimitiveData(Parameters.PrimitiveId).WorldToLocal)));

    #if USE_INSTANCING || IS_MESHPARTICLE_FACTORY
    ObjectToWorldDir = (MaterialFloat3x3)Parameters.InstanceLocalToWorld;
    #else
    ObjectToWorldDir = GetLocalToWorld3x3(Parameters.PrimitiveId);
    #endif

    HUX_OBJECT_TO_WORLD_POS_MATRIX = GetPrimitiveData(Parameters.PrimitiveId).LocalToWorld;

    Use_Global_Left_Index_Int = useGlobalLeftIndex;
    Use_Global_Right_Index_Int = useGlobalRightIndex;
    Global_Left_Index_Tip_Position = globalLeftIndexTipPosition;
    Global_Right_Index_Tip_Position = globalRightIndexTipPosition;

    // Active_Face_Center
    float3 Active_Face_Center_Q346;
    Active_Face_Center_Q346 = (mul(float4(_Active_Face_Dir_*0.5,1.0),HUX_OBJECT_TO_WORLD_POS_MATRIX).xyz);
    
    // Pick_Local_Or_Global_Left
    float3 Blob_Position_Q338 =  (Use_Global_Left_Index ? Global_Left_Index_Tip_Position.xyz :  _Blob_Position_);

    // Pick_Local_Or_Global_Right
    float3 Blob_Position_Q339 =  (Use_Global_Right_Index ? Global_Right_Index_Tip_Position.xyz :  _Blob_Position_2_);

    // Object_To_World_Dir
    float3 Active_Face_Dir_Q361 = normalize((mul(_Active_Face_Dir_, ObjectToWorldDir)));

    // Relative_Scale
    float Relative_Scale_Q354;
    if (_Relative_Width_==1.0) {
      Relative_Scale_Q354 = length((mul(float3(0,1,0), ObjectToWorldDir)));
    } else {
      Relative_Scale_Q354 = 1;
    }

    // Object_To_World_Dir
    float3 Tangent_World_Q326;
    Tangent_World_Q326=(mul(vertexLocalTangent, ObjectToWorldDir));
    
    // Object_To_World_Dir
    float3 Binormal_World_Q327;
    Binormal_World_Q327=(mul(vertexLocalBinormal, ObjectToWorldDir));
    
    // Object_To_World_Dir
    float3 Normal_World_Q357;
    Normal_World_Q357=(mul(vertexLocalNormal, ObjectToWorldDir));
    
    // Scale3
    float3 Result_Q314 = 0.5 * vertexLocalNormal;

    float3 Dir_World_Q364;
    Object_To_World_Dir_B364(_Active_Face_Up_,Dir_World_Q364);

    // Multiply
    float Product_Q353 = _Edge_Width_ * Relative_Scale_Q354;

    // Normalize3
    float3 Normal_World_N_Q325 = normalize(Normal_World_Q357);

    // Normalize3
    float3 Tangent_World_N_Q324 = normalize(Tangent_World_Q326);

    // Normalize3
    float3 Binormal_World_N_Q328 = normalize(Binormal_World_Q327);

    float3 Position_Q335;
    float Near_Size_Q335;
    float Inner_Fade_Q335;
    float Blob_Enable_Q335;
    float Fade_Q335;
    float Pulse_Q335;
    Choose_Blob_B335(vertexInput_Color,Blob_Position_Q338,Blob_Position_Q339,_Blob_Enable_,_Blob_Enable_2_,_Blob_Near_Size_,_Blob_Near_Size_2_,_Blob_Inner_Fade_,_Blob_Inner_Fade_2_,_Blob_Pulse_,_Blob_Pulse_2_,_Blob_Fade_,_Blob_Fade_2_,Position_Q335,Near_Size_Q335,Inner_Fade_Q335,Blob_Enable_Q335,Fade_Q335,Pulse_Q335);

    // Object_To_World_Pos
    float3 Face_Center_Q329;
    Face_Center_Q329=(mul(float4(Result_Q314,1.0),HUX_OBJECT_TO_WORLD_POS_MATRIX).xyz);
    
    // Face_Size
    float2 Face_Size_Q347 = float2(length(Tangent_World_Q326),length(Binormal_World_Q327));

    float Show_Selection_Q345;
    Selection_Vertex_B345(Blob_Position_Q338,Blob_Position_Q339,Face_Center_Q329,Face_Size_Q347,Normal_World_N_Q325,Tangent_World_N_Q324,Binormal_World_N_Q328,_Selection_Fuzz_,_Selected_,_Selected_Distance_,_Selected_Fade_Length_,Active_Face_Dir_Q361,Show_Selection_Q345);

    // Normalize3
    float3 Normalized_Q369 = normalize(Dir_World_Q364);

    // Active_Face
    float Active_Q330 = max(0.0,dot(Active_Face_Dir_Q361,Normal_World_N_Q325));

    float Width_Q351;
    Proximity_Visibility_B351(Show_Selection_Q345,Blob_Position_Q338,Blob_Position_Q339,Product_Q353,_Proximity_Far_Distance_,_Proximity_Near_Radius_,Active_Face_Center_Q346,Active_Face_Dir_Q361,Width_Q351);

    float3 Wire_Vx_Pos_Q348;
    float2 UV_Q348;
    float2 Widths_Q348;
    Wireframe_Vertex_B348(vertexLocalPosition,vertexLocalNormal,vertexLocalTangent,vertexLocalBinormal,Width_Q351,Face_Size_Q347,Wire_Vx_Pos_Q348,UV_Q348,Widths_Q348);

    // Pack_For_Vertex
    float3 Vec3_Q323 = float3(Widths_Q348.x,Widths_Q348.y,vertexInput_Color.r);

    float3 Pos_World_Q309;
    Object_To_World_Pos_B309(Wire_Vx_Pos_Q348,Pos_World_Q309);

    // Incident3
    float3 Incident_Q333 = normalize(Pos_World_Q309-vertexInput_Eye);

    float3 Out_Position_Q344;
    float2 Out_UV_Q344;
    float3 Blob_Info_Q344;
    Blob_Vertex_B344(Pos_World_Q309,Normal_World_N_Q325,Tangent_World_N_Q324,Binormal_World_N_Q328,Position_Q335,_Blob_Intensity_,Near_Size_Q335,_Blob_Far_Size_,_Blob_Near_Distance_,_Blob_Far_Distance_,vertexInput_Color,vertexInput_UV,Face_Center_Q329,Face_Size_Q347,UV_Q348,_Blob_Fade_Length_,_Selection_Fade_,_Selection_Fade_Size_,Inner_Fade_Q335,Active_Face_Center_Q346,Pulse_Q335,Fade_Q335,Blob_Enable_Q335,Out_Position_Q344,Out_UV_Q344,Blob_Info_Q344);

    float4 Extra1_Q363;
    float Distance_To_Face_Q363;
    float Intensity_Q363;
    Proximity_Vertex_B363(Blob_Position_Q338,Blob_Position_Q339,Active_Face_Center_Q346,Active_Face_Dir_Q361,Pos_World_Q309,_Proximity_Far_Distance_,Relative_Scale_Q354,_Proximity_Anisotropy_,Normalized_Q369,Extra1_Q363,Distance_To_Face_Q363,Intensity_Q363);

    float4 Holo_Edges_Q341;
    Holo_Edge_Vertex_B341(Incident_Q333,Normal_World_N_Q325,vertexInput_UV,Tangent_World_Q326,Binormal_World_Q327,_Smooth_Active_Face_,Active_Q330,Holo_Edges_Q341);

    // From_XYZ
    float3 Vec3_Q315 = float3(Show_Selection_Q345,Distance_To_Face_Q363,Intensity_Q363);

    float3 Position = Out_Position_Q344;
    float2 UV = Out_UV_Q344;
    float3 Tangent = Blob_Info_Q344;
    float3 Binormal = Vec3_Q315;
    float3 Normal = Vec3_Q323;
    float4 Extra1 = Extra1_Q363;
    float4 Color = Holo_Edges_Q341;


    huxVertexOutput_Normal = Normal;
    huxVertexOutput_UV = UV;
    huxVertexOutput_Tangent = Tangent;
    huxVertexOutput_Binormal = Binormal;
    huxVertexOutput_Color = Color;
    huxVertexOutput_Extra1 = Extra1;
    huxVertexOutput_Offset = Position-vertexWorldPosition;
	return huxVertexOutput_Offset;
}

//BLOCK_BEGIN Holo_Edge_Fragment 332

void Holo_Edge_Fragment_B332(
    float4 Edges,
    float Edge_Width,
    out float NotEdge)
{
    float2 c = float2(min(Edges.r,Edges.g),min(Edges.b,Edges.a));
    float2 df = fwidth(c)*Edge_Width;
    float2 g = saturate(c/df);
    NotEdge = g.x*g.y;
}
//BLOCK_END Holo_Edge_Fragment

//BLOCK_BEGIN Blob_Fragment 336

void Blob_Fragment_B336(
    float2 UV,
    float3 Blob_Info,
    Texture2D Blob_Texture, SamplerState Blob_Texture_Sampler,
    out float4 Blob_Color)
{
    float k = dot(UV,UV);
    Blob_Color = Blob_Info.y * Texture2DSample(Blob_Texture, Blob_Texture_Sampler, float2(sqrt(k),Blob_Info.x))*(1.0-saturate(k));
}
//BLOCK_END Blob_Fragment

//BLOCK_BEGIN Wireframe_Fragment 356

float2 FilterStep(float2 Edge, float2 X)
{
    // note we are in effect doubling the filter width
    float2 dX = max(fwidth(X),float2(0.00001,0.00001));
    return saturate( (X+dX - max(Edge,X-dX))/(dX*2.0));
}

void Wireframe_Fragment_B356(
    float3 Widths,
    float2 UV,
    float Proximity,
    float4 Edge_Color,
    out float4 Wireframe)
{
    float2 c = min(UV,float2(1.0,1.0)-UV);
    float2 g = FilterStep(Widths.xy*0.5,c); 
    Wireframe = (1.0-min(g.x,g.y))*Proximity * Edge_Color;
    
}
//BLOCK_END Wireframe_Fragment

//BLOCK_BEGIN Proximity 350

void Proximity_B350(
    float3 Proximity_Center,
    float3 Proximity_Center_2,
    float Proximity_Max_Intensity,
    float Proximity_Near_Radius,
    float3 Position,
    float3 Show_Selection,
    float4 Extra1,
    float Dist_To_Face,
    float Intensity,
    out float Proximity)
{
    float2 delta1 = Extra1.xy;
    float2 delta2 = Extra1.zw;
    
    float d2 = sqrt(min(dot(delta1,delta1),dot(delta2,delta2)) + Dist_To_Face*Dist_To_Face);
    
    //float d = distance(Proximity_Center.xyz,Position);
    Proximity = Intensity * Proximity_Max_Intensity * (1.0-saturate(d2/Proximity_Near_Radius))*(1.0-Show_Selection.x)+Show_Selection.x;
    
}
//BLOCK_END Proximity

//BLOCK_BEGIN To_XYZ 343

void To_XYZ_B343(
    float3 Vec3,
    out float X,
    out float Y,
    out float Z)
{
    X=Vec3.x;
    Y=Vec3.y;
    Z=Vec3.z;
    
}
//BLOCK_END To_XYZ


float4 Hushed_Fragment(
    FMaterialPixelParameters Parameters
    ,float4 _Edge_Color_
    ,float _Proximity_Max_Intensity_
    ,float _Proximity_Near_Radius_
    ,float3 _Blob_Position_
    ,Texture2D _Blob_Texture_, SamplerState _Blob_Texture_Sampler
    ,float3 _Blob_Position_2_
    ,float _Enable_Fade_
    ,float _Fade_Width_
    ,bool _Show_Frame_
    ,int useGlobalLeftIndex
    ,int useGlobalRightIndex
    ,float4 globalLeftIndexTipPosition
    ,float4 globalRightIndexTipPosition

	,float3 fragInput_Position
	,float3 fragInput_Normal
	,float2 fragInput_UV
	,float3 fragInput_Tangent
	,float3 fragInput_Binormal
	,float4 fragInput_Color
	,float4 fragInput_Extra1
)
{
    Use_Global_Left_Index_Int = useGlobalLeftIndex;
    Use_Global_Right_Index_Int = useGlobalRightIndex;
    Global_Left_Index_Tip_Position = globalLeftIndexTipPosition;
    Global_Right_Index_Tip_Position = globalRightIndexTipPosition;

    float NotEdge_Q332;
    if (_Enable_Fade_==1.0) {
      Holo_Edge_Fragment_B332(fragInput_Color,_Fade_Width_,NotEdge_Q332);
    } else {
      NotEdge_Q332 = 1;
    }

    float4 Blob_Color_Q336;
    Blob_Fragment_B336(fragInput_UV,fragInput_Tangent,_Blob_Texture_,_Blob_Texture_Sampler,Blob_Color_Q336);

    // Is_Quad
    float Is_Quad_Q320;
    Is_Quad_Q320=fragInput_Normal.z;
    
    // Pick_Local_Or_Global_Left
    float3 Blob_Position_Q338 =  (Use_Global_Left_Index ? Global_Left_Index_Tip_Position.xyz :  _Blob_Position_);

    // Pick_Local_Or_Global_Right
    float3 Blob_Position_Q339 =  (Use_Global_Right_Index ? Global_Right_Index_Tip_Position.xyz :  _Blob_Position_2_);

    float X_Q343;
    float Y_Q343;
    float Z_Q343;
    To_XYZ_B343(fragInput_Binormal,X_Q343,Y_Q343,Z_Q343);

    float Proximity_Q350;
    Proximity_B350(Blob_Position_Q338,Blob_Position_Q339,_Proximity_Max_Intensity_,_Proximity_Near_Radius_,fragInput_Position,fragInput_Binormal,fragInput_Extra1,Y_Q343,Z_Q343,Proximity_Q350);

    float4 Wireframe_Q356;
    Wireframe_Fragment_B356(fragInput_Normal,fragInput_UV,Proximity_Q350,_Edge_Color_,Wireframe_Q356);

    // Mix_Colors
    float4 Wire_Or_Blob_Q319 = lerp(Wireframe_Q356, Blob_Color_Q336,float4( Is_Quad_Q320, Is_Quad_Q320, Is_Quad_Q320, Is_Quad_Q320));

    // Conditional_Color
    float4 Result_Q318;
    Result_Q318 = _Show_Frame_ ? float4(0.3,0.3,0.3,0.3) : Wire_Or_Blob_Q319;
    
    // Scale_Color
    float4 Final_Color_Q334 = NotEdge_Q332 * Result_Q318;

    float4 Out_Color = Final_Color_Q334;
    float Clip_Threshold = 0;
    bool To_sRGB = false;

    return Out_Color;
}

#endif
