#ifndef HUSHED_VERTEX_FRAGMENT_SHADER
#define HUSHED_VERTEX_FRAGMENT_SHADER

static MaterialFloat4x4 HUX_OBJECT_TO_WORLD_POS_MATRIX;
static MaterialFloat3x3 ObjectToWorldDir;
#define Use_Global_Left_Index (Use_Global_Left_Index_Int!=0)
#define Use_Global_Right_Index (Use_Global_Right_Index_Int!=0)
static int Use_Global_Left_Index_Int;
static int Use_Global_Right_Index_Int;
static float4 Global_Left_Index_Tip_Position;
static float4 Global_Right_Index_Tip_Position;
static float4 Global_Left_Index_Middle_Position;
static float4 Global_Right_Index_Middle_Position;
static float4 Global_Left_Thumb_Tip_Position;
static float4 Global_Right_Thumb_Tip_Position;

//BLOCK_BEGIN Object_To_World_Pos 136

void Object_To_World_Pos_B136(
    float3 Pos_Object,
    out float3 Pos_World)
{
    Pos_World=(mul(float4(Pos_Object,1.0),HUX_OBJECT_TO_WORLD_POS_MATRIX).xyz);
    
}
//BLOCK_END Object_To_World_Pos

//BLOCK_BEGIN Wireframe_Vertex 174

void Wireframe_Vertex_B174(
    float3 Position,
    float3 Normal,
    float3 Tangent,
    float3 Bitangent,
    float3 Tangent_World,
    float3 Bitangent_World,
    float Edge_Width,
    float ScaleWidth,
    out float3 Result,
    out float2 UV,
    out float2 Widths,
    out float2 Face_Size)
{
    Face_Size = float2(length(Tangent_World),length(Bitangent_World));
    Widths.xy = ScaleWidth * Edge_Width / Face_Size;
    
    float x = dot(Position,Tangent);
    float y = dot(Position,Bitangent);
    
    float dx = 0.5-abs(x);
    float newx = (0.5 - dx * Widths.x * 2.0)*sign(x);
    
    float dy = 0.5-abs(y);
    float newy = (0.5 - dy * Widths.y * 2.0)*sign(y);
    
    //Result = Normal * 0.5 + newx * Tangent + newy * Bitangent;
    Result = newx * Tangent + newy * Bitangent;
    
    UV.x = dot(Result,Tangent) + 0.5;
    UV.y = dot(Result,Bitangent) + 0.5;
}
//BLOCK_END Wireframe_Vertex

//BLOCK_BEGIN Holo_Edge_Vertex 152

void Holo_Edge_Vertex_B152(
    float3 Normal,
    float2 UV,
    float3 Tangent,
    float3 Bitangent,
    float3 Incident,
    bool Hide_Faces,
    out float4 Holo_Edges)
{
    float NdotI = dot(Incident,Normal);
    float2 flip = (UV-float2(0.5,0.5));
    
    float udot = dot(Incident,Tangent)*flip.x*NdotI;
    float uval = (udot>0.0 && !Hide_Faces ? 0.0 : 1.0);
    
    float vdot = -dot(Incident,Bitangent)*flip.y*NdotI;
    float vval = (vdot>0.0 && !Hide_Faces ? 0.0 : 1.0);
    
    float frontside = NdotI<0.0 || Hide_Faces ? 1.0 : 0.0;
    //float smoothall = Hide_Faces ? 0.0 : 1.0;
    Holo_Edges = float4(1.0,1.0,1.0,1.0)-float4(uval*UV.x,uval*(1.0-UV.x),vval*UV.y,vval*(1.0-UV.y)) * frontside;
}
//BLOCK_END Holo_Edge_Vertex

//BLOCK_BEGIN ComputeWidth 156

void ComputeWidth_B156(
    float3 Eye,
    float3 Model_Center,
    float Near_Width,
    float Far_Width,
    float Near_Distance,
    float Far_Distance,
    out float Width)
{
    float d = distance(Model_Center, Eye);
    float k = saturate((d-Near_Distance)/(Far_Distance-Near_Distance));
    Width = lerp(Near_Width, Far_Width, k);
    
}
//BLOCK_END ComputeWidth

//BLOCK_BEGIN Proximity_Visibility 173

void Proximity_Visibility_B173(
    float3 Proximity_Center,
    float3 Proximity_Center_2,
    float Proximity_Far_Radius,
    float3 Center,
    bool Always_Show,
    out float ScaleWidth)
{
    //make all edges invisible if no proximity or selection visible
    float3 boxEdges = abs((mul(float3(0.5,0.5,0.5), ObjectToWorldDir)));
    float boxMaxSize = length(boxEdges);
    
    float3 delta1 = (Proximity_Center - Center);
    float3 delta2 = (Proximity_Center_2 - Center);
    
    float minDistance = sqrt(min(dot(delta1,delta1),dot(delta2,delta2)));
    
    ScaleWidth = Always_Show ? 1.0 : (1.0-step(Proximity_Far_Radius+boxMaxSize, minDistance));
    
}
//BLOCK_END Proximity_Visibility


static float3 huxVertexOutput_Normal;
static float2 huxVertexOutput_UV;
static float4 huxVertexOutput_Extra1;
static float3 huxVertexOutput_Offset;

float3 Hushed_Vertex(
    FMaterialVertexParameters Parameters
    ,float _Near_Width_
    ,float _Far_Width_
    ,float _Near_Distance_
    ,float _Far_Distance_
    ,bool _Always_Show_
    ,float _Proximity_Far_Radius_
    ,float3 _Blob_Position_
    ,float3 _Blob_Position_2_
    ,bool _Hide_XY_Faces_
    ,int useGlobalLeftIndex
    ,int useGlobalRightIndex
    ,float4 globalLeftIndexTipPosition
    ,float4 globalRightIndexTipPosition

	,float2 vertexInput_UV
	,float3 vertexInput_Eye
)
{
    float3 vertexWorldPosition = GetWorldPosition(Parameters);
    //float3 vertexLocalPosition = mul(float4(vertexWorldPosition, 1), GetPrimitiveData(Parameters.PrimitiveId).WorldToLocal).xyz;
    float3 vertexLocalPosition = Parameters.PreSkinnedPosition;
	//float3 worldNormal = Parameters.WorldNormal; //mul(MaterialFloat3(1.00000000,0.00000000,0.00000000), (MaterialFloat3x3)(Parameters.TangentToWorld));
	//float3 vertexLocalNormal = mul(worldNormal,(MaterialFloat3x3)(GetPrimitiveData(Parameters.PrimitiveId).WorldToLocal));
    float3 vertexLocalNormal = Parameters.PreSkinnedNormal;
	float3 worldTangent = Parameters.TangentToWorld[0];
	float3 vertexLocalTangent = normalize(mul(worldTangent,(MaterialFloat3x3)(GetPrimitiveData(Parameters.PrimitiveId).WorldToLocal)));
    //float3 vertexLocalTangent = Parameters.TangentToLocal[0];
	float3 worldBinormal = Parameters.TangentToWorld[1];
	float3 vertexLocalBinormal = normalize(mul(worldBinormal,(MaterialFloat3x3)(GetPrimitiveData(Parameters.PrimitiveId).WorldToLocal)));
    //float3 vertexLocalBinormal = Parameters.TangentToLocal[1];

    #if USE_INSTANCING || IS_MESHPARTICLE_FACTORY
    ObjectToWorldDir = (MaterialFloat3x3)Parameters.InstanceLocalToWorld;
    #else
    ObjectToWorldDir = GetLocalToWorld3x3(Parameters.PrimitiveId);
    #endif

    HUX_OBJECT_TO_WORLD_POS_MATRIX = GetPrimitiveData(Parameters.PrimitiveId).LocalToWorld;

    Use_Global_Left_Index_Int = useGlobalLeftIndex;
    Use_Global_Right_Index_Int = useGlobalRightIndex;
    Global_Left_Index_Tip_Position = globalLeftIndexTipPosition;
    Global_Right_Index_Tip_Position = globalRightIndexTipPosition;

    // Object_To_World_Dir
    float3 Dir_World_Q171=(mul(vertexLocalTangent, ObjectToWorldDir));

    // Object_To_World_Dir
    float3 Dir_World_Q172=(mul(vertexLocalBinormal, ObjectToWorldDir));

    // Hide_Faces
    float Visible_Q150 = _Hide_XY_Faces_ ? abs(vertexLocalNormal.z) : 1.0;

    float3 Pos_World_Q155;
    Object_To_World_Pos_B136(float3(0,0,0),Pos_World_Q155);

    // Pick_Local_Or_Global_Left
    float3 Blob_Position_Q160 =  (Use_Global_Left_Index ? Global_Left_Index_Tip_Position.xyz :  _Blob_Position_);

    // Pick_Local_Or_Global_Right
    float3 Blob_Position_Q161 =  (Use_Global_Right_Index ? Global_Right_Index_Tip_Position.xyz :  _Blob_Position_2_);

    // Object_To_World_Dir
    float3 Nrm_World_Q170=(mul(vertexLocalNormal, ObjectToWorldDir));

    float Width_Q156;
    ComputeWidth_B156(vertexInput_Eye,Pos_World_Q155,_Near_Width_,_Far_Width_,_Near_Distance_,_Far_Distance_,Width_Q156);

    float ScaleWidth_Q173;
    Proximity_Visibility_B173(Blob_Position_Q160,Blob_Position_Q161,_Proximity_Far_Radius_,Pos_World_Q155,_Always_Show_,ScaleWidth_Q173);

    // Normalize3
    float3 Normalized_Q140 = normalize(Nrm_World_Q170);

    float3 Result_Q174;
    float2 UV_Q174;
    float2 Widths_Q174;
    float2 Face_Size_Q174;
    Wireframe_Vertex_B174(vertexLocalPosition,vertexLocalNormal,vertexLocalTangent,vertexLocalBinormal,Dir_World_Q171,Dir_World_Q172,Width_Q156,ScaleWidth_Q173,Result_Q174,UV_Q174,Widths_Q174,Face_Size_Q174);

    // Scale3
    float3 Result_Q149 = Visible_Q150 * Result_Q174;

    // Scale2
    float2 Result_Q167 = Widths_Q174 * 0.5;

    float3 Pos_World_Q136;
    Object_To_World_Pos_B136(Result_Q149,Pos_World_Q136);

    // Pack_For_Vertex
    float3 Vec3_Q141 = float3(Result_Q167.x,Result_Q167.y,0);

    // Incident3
    float3 Incident_Q146 = normalize(Pos_World_Q136-vertexInput_Eye);

    float4 Holo_Edges_Q152;
    Holo_Edge_Vertex_B152(Normalized_Q140,vertexInput_UV,Dir_World_Q171,Dir_World_Q172,Incident_Q146,_Hide_XY_Faces_,Holo_Edges_Q152);

    float3 Position = Pos_World_Q136;
    float2 UV = UV_Q174;
    float3 Tangent = float3(0,0,0);
    float3 Binormal = float3(0,0,0);
    float4 Color = float4(1,1,1,1);
    float4 Extra1 = Holo_Edges_Q152;
    float3 Normal = Vec3_Q141;


    huxVertexOutput_Normal = Normal;
    huxVertexOutput_UV = UV;
    huxVertexOutput_Extra1 = Extra1;
    huxVertexOutput_Offset = Position-vertexWorldPosition;
	return huxVertexOutput_Offset;
}

//BLOCK_BEGIN Holo_Edge_Fragment 147

void Holo_Edge_Fragment_B147(
    float Edge_Width,
    float4 Edges,
    out float NotEdge)
{
    float2 c = float2(min(Edges.x,Edges.y),min(Edges.z,Edges.w));
    float2 df = fwidth(c)*Edge_Width;
    float2 g = saturate(c/df);
    NotEdge = g.x*g.y;
}
//BLOCK_END Holo_Edge_Fragment

//BLOCK_BEGIN Wireframe_Fragment 168

float2 FilterStep(float2 Edge, float2 X)
{
    // note we are in effect doubling the filter width
    float2 dX = max(fwidth(X),float2(0.00001,0.00001));
    return saturate( (X+dX - max(Edge,X-dX))/(dX*2.0));
}

void Wireframe_Fragment_B168(
    float3 Widths,
    float2 UV,
    out float Edge)
{
    float2 c = min(UV,float2(1.0,1.0)-UV);
    float2 g = FilterStep(Widths.xy,c); 
    Edge = 1.0-min(g.x,g.y);
    
}
//BLOCK_END Wireframe_Fragment

//BLOCK_BEGIN Proximity 162

void Proximity_B162(
    float3 Position,
    float3 Proximity_Center,
    float3 Proximity_Center_2,
    float Proximity_Max_Intensity,
    float Proximity_Far_Radius,
    float Proximity_Near_Radius,
    out float Proximity)
{
    float3 delta1 = Proximity_Center-Position;
    float3 delta2 = Proximity_Center_2-Position;
    
    float d2 = sqrt(min(dot(delta1,delta1),dot(delta2,delta2)));
    Proximity = Proximity_Max_Intensity * (1.0-saturate((d2-Proximity_Near_Radius)/(Proximity_Far_Radius-Proximity_Near_Radius)));
}
//BLOCK_END Proximity


float4 Hushed_Fragment(
    FMaterialPixelParameters Parameters
    ,float4 _Base_Color_
    ,float4 _Proximity_Color_
    ,float _Proximity_Max_Intensity_
    ,float _Proximity_Far_Radius_
    ,float _Proximity_Near_Radius_
    ,float3 _Blob_Position_
    ,float3 _Blob_Position_2_
    ,float _Enable_Fade_
    ,float _Fade_Width_
    ,int useGlobalLeftIndex
    ,int useGlobalRightIndex
    ,float4 globalLeftIndexTipPosition
    ,float4 globalRightIndexTipPosition

	,float3 fragInput_Position
	,float3 fragInput_Normal
	,float2 fragInput_UV
	,float4 fragInput_Extra1
)
{
    Use_Global_Left_Index_Int = useGlobalLeftIndex;
    Use_Global_Right_Index_Int = useGlobalRightIndex;
    Global_Left_Index_Tip_Position = globalLeftIndexTipPosition;
    Global_Right_Index_Tip_Position = globalRightIndexTipPosition;

    float NotEdge_Q147;
    if (_Enable_Fade_==1.0) {
      Holo_Edge_Fragment_B147(_Fade_Width_,fragInput_Extra1,NotEdge_Q147);
    } else {
      NotEdge_Q147 = 1;
    }

    float Edge_Q168;
    Wireframe_Fragment_B168(fragInput_Normal,fragInput_UV,Edge_Q168);

    // Pick_Local_Or_Global_Left
    float3 Blob_Position_Q160 =  (Use_Global_Left_Index ? Global_Left_Index_Tip_Position.xyz :  _Blob_Position_);

    // Pick_Local_Or_Global_Right
    float3 Blob_Position_Q161 =  (Use_Global_Right_Index ? Global_Right_Index_Tip_Position.xyz :  _Blob_Position_2_);

    // Multiply
    float Product_Q165 = NotEdge_Q147 * Edge_Q168;

    float Proximity_Q162;
    Proximity_B162(fragInput_Position,Blob_Position_Q160,Blob_Position_Q161,_Proximity_Max_Intensity_,_Proximity_Far_Radius_,_Proximity_Near_Radius_,Proximity_Q162);

    // Mix_Colors
    float4 Color_At_T_Q159 = lerp(_Base_Color_, _Proximity_Color_,float4( Proximity_Q162, Proximity_Q162, Proximity_Q162, Proximity_Q162));

    // Scale_Color
    float4 Result_Q139 = Product_Q165 * Color_At_T_Q159;

    float4 Out_Color = Result_Q139;
    float Clip_Threshold = 0;
    bool To_sRGB = false;

    return Out_Color;
}

#endif
