#ifndef HUSHED_VERTEX_FRAGMENT_SHADER
#define HUSHED_VERTEX_FRAGMENT_SHADER

static MaterialFloat4x4 HUX_OBJECT_TO_WORLD_POS_MATRIX;
static MaterialFloat3x3 ObjectToWorldDir;
#define Use_Global_Left_Index (Use_Global_Left_Index_Int!=0)
#define Use_Global_Right_Index (Use_Global_Right_Index_Int!=0)
static int Use_Global_Left_Index_Int;
static int Use_Global_Right_Index_Int;
static float4 Global_Left_Index_Tip_Position;
static float4 Global_Right_Index_Tip_Position;
static float4 Global_Left_Index_Middle_Position;
static float4 Global_Right_Index_Middle_Position;
static float4 Global_Left_Thumb_Tip_Position;
static float4 Global_Right_Thumb_Tip_Position;

//BLOCK_BEGIN Blob_Vertex 133

void Blob_Vertex_B133(
    float3 Normal,
    float3 Tangent,
    float3 Bitangent,
    float3 Blob_Position,
    float Intensity,
    float4 Near_Color,
    float4 Far_Color,
    float Blob_Near_Size,
    float Blob_Far_Size,
    float Blob_Near_Distance,
    float Blob_Far_Distance,
    float4 Vx_Color,
    float2 UV,
    float3 Face_Center,
    float2 Face_Size,
    float Blob_Fade_Length,
    float Inner_Fade,
    float Blob_Enabled,
    float Fade,
    float Pulse,
    float Visible,
    out float3 Out_Position,
    out float2 Out_UV,
    out float3 Blob_Info)
{
    
    float Hit_Distance = dot(Blob_Position-Face_Center, Normal);
    float3 Hit_Position = Blob_Position - Hit_Distance * Normal;
    
    float absD = abs(Hit_Distance);
    float lerpVal = clamp((absD-Blob_Near_Distance)/(Blob_Far_Distance-Blob_Near_Distance),0.0,1.0);
    float fadeIn = 1.0-clamp((absD-Blob_Far_Distance)/Blob_Fade_Length,0.0,1.0);
    
    //compute blob position & uv
    float3 delta = Hit_Position - Face_Center;
    float2 blobCenterXY = float2(dot(delta,Tangent),dot(delta,Bitangent));
    
    float innerFade = 1.0-clamp(-Hit_Distance/Inner_Fade,0.0,1.0);
    
    float size = lerp(Blob_Near_Size,Blob_Far_Size,lerpVal)*innerFade*Blob_Enabled*Visible*step(0.001,fadeIn);
    //float size = lerp(Blob_Near_Size,sqrt(max(0.0,radius*radius-Hit_Distance*Hit_Distance)),lerpVal);
    
    float2 quadUVin = 2.0*UV-1.0;  // remap to (-.5,.5)
    float2 blobXY = blobCenterXY+quadUVin*size;
    //keep the quad within the face
    float2 blobClipped = clamp(blobXY,-Face_Size*0.5,Face_Size*0.5);
    float2 blobUV = (blobClipped-blobCenterXY)/max(size,0.0001)*2.0;
    
    float3 blobCorner = Face_Center + blobClipped.x*Tangent + blobClipped.y*Bitangent;
    
    //blend using VxColor.r=1 for blob quad, 0 otherwise
    Out_Position = blobCorner;
    Out_UV = blobUV;
    Blob_Info = float3((lerpVal*0.5+0.5)*(1.0-Pulse),Intensity*fadeIn*Fade,0.0);
    
}
//BLOCK_END Blob_Vertex

//BLOCK_BEGIN Choose_Blob 121

void Choose_Blob_B121(
    float4 Vx_Color,
    float3 Position1,
    float3 Position2,
    bool Blob_Enable_1,
    bool Blob_Enable_2,
    float Near_Size_1,
    float Near_Size_2,
    float Blob_Inner_Fade_1,
    float Blob_Inner_Fade_2,
    float Blob_Pulse_1,
    float Blob_Pulse_2,
    float Blob_Fade_1,
    float Blob_Fade_2,
    out float3 Position,
    out float Near_Size,
    out float Inner_Fade,
    out float Blob_Enable,
    out float Fade,
    out float Pulse)
{
    float3 blob1 =  (Use_Global_Left_Index ? Global_Left_Index_Tip_Position.xyz :  Position1);
    float3 blob2 =  (Use_Global_Right_Index ? Global_Right_Index_Tip_Position.xyz :  Position2);
    
    Position = blob1*(1.0-Vx_Color.g)+Vx_Color.g*blob2;
    
    float b1 = Blob_Enable_1 ? 1.0 : 0.0;
    float b2 = Blob_Enable_2 ? 1.0 : 0.0;
    Blob_Enable = b1+(b2-b1)*Vx_Color.g;
    
    Pulse = Blob_Pulse_1*(1.0-Vx_Color.g)+Vx_Color.g*Blob_Pulse_2;
    Fade = Blob_Fade_1*(1.0-Vx_Color.g)+Vx_Color.g*Blob_Fade_2;
    Near_Size = Near_Size_1*(1.0-Vx_Color.g)+Vx_Color.g*Near_Size_2;
    Inner_Fade = Blob_Inner_Fade_1*(1.0-Vx_Color.g)+Vx_Color.g*Blob_Inner_Fade_2;
}
//BLOCK_END Choose_Blob

//BLOCK_BEGIN Object_To_World_Pos 112

void Object_To_World_Pos_B112(
    float3 Pos_Object,
    out float3 Pos_World)
{
    Pos_World=(mul(float4(Pos_Object,1.0),HUX_OBJECT_TO_WORLD_POS_MATRIX).xyz);
    
}
//BLOCK_END Object_To_World_Pos

//BLOCK_BEGIN Object_To_World_Dir 126

void Object_To_World_Dir_B126(
    float3 Nrm_Object,
    out float3 Nrm_World)
{
    Nrm_World=(mul(Nrm_Object, ObjectToWorldDir));
}
//BLOCK_END Object_To_World_Dir

//BLOCK_BEGIN Object_To_World_Dir 118

void Object_To_World_Dir_B118(
    float3 Dir_Object,
    out float3 Dir_World)
{
    Dir_World=(mul(Dir_Object, ObjectToWorldDir));
}
//BLOCK_END Object_To_World_Dir


static float3 huxVertexOutput_Normal;
static float2 huxVertexOutput_UV;
static float3 huxVertexOutput_Offset;

float3 Hushed_Vertex(
    FMaterialVertexParameters Parameters
    ,bool _Blob_Enable_
    ,float3 _Blob_Position_
    ,float _Blob_Intensity_
    ,float _Blob_Near_Size_
    ,float _Blob_Far_Size_
    ,float _Blob_Near_Distance_
    ,float _Blob_Far_Distance_
    ,float _Blob_Fade_Length_
    ,float _Blob_Inner_Fade_
    ,float _Blob_Pulse_
    ,float _Blob_Fade_
    ,bool _Blob_Enable_2_
    ,float3 _Blob_Position_2_
    ,float _Blob_Near_Size_2_
    ,float _Blob_Inner_Fade_2_
    ,float _Blob_Pulse_2_
    ,float _Blob_Fade_2_
    ,bool _Hide_XY_Faces_
    ,int useGlobalLeftIndex
    ,int useGlobalRightIndex
    ,float4 globalLeftIndexTipPosition
    ,float4 globalRightIndexTipPosition

	,float2 vertexInput_UV
	,float4 vertexInput_Color
)
{
    float3 vertexWorldPosition = GetWorldPosition(Parameters);
	//float3 worldNormal = Parameters.WorldNormal; //mul(MaterialFloat3(1.00000000,0.00000000,0.00000000), (MaterialFloat3x3)(Parameters.TangentToWorld));
	//float3 vertexLocalNormal = mul(worldNormal,(MaterialFloat3x3)(GetPrimitiveData(Parameters.PrimitiveId).WorldToLocal));
    float3 vertexLocalNormal = Parameters.PreSkinnedNormal;
	float3 worldTangent = Parameters.TangentToWorld[0];
	float3 vertexLocalTangent = normalize(mul(worldTangent,(MaterialFloat3x3)(GetPrimitiveData(Parameters.PrimitiveId).WorldToLocal)));
    //float3 vertexLocalTangent = Parameters.TangentToLocal[0];
	float3 worldBinormal = Parameters.TangentToWorld[1];
	float3 vertexLocalBinormal = normalize(mul(worldBinormal,(MaterialFloat3x3)(GetPrimitiveData(Parameters.PrimitiveId).WorldToLocal)));
    //float3 vertexLocalBinormal = Parameters.TangentToLocal[1];

    #if USE_INSTANCING || IS_MESHPARTICLE_FACTORY
    ObjectToWorldDir = (MaterialFloat3x3)Parameters.InstanceLocalToWorld;
    #else
    ObjectToWorldDir = GetLocalToWorld3x3(Parameters.PrimitiveId);
    #endif

    HUX_OBJECT_TO_WORLD_POS_MATRIX = GetPrimitiveData(Parameters.PrimitiveId).LocalToWorld;

    Use_Global_Left_Index_Int = useGlobalLeftIndex;
    Use_Global_Right_Index_Int = useGlobalRightIndex;
    Global_Left_Index_Tip_Position = globalLeftIndexTipPosition;
    Global_Right_Index_Tip_Position = globalRightIndexTipPosition;

    float3 Position_Q121;
    float Near_Size_Q121;
    float Inner_Fade_Q121;
    float Blob_Enable_Q121;
    float Fade_Q121;
    float Pulse_Q121;
    Choose_Blob_B121(vertexInput_Color,_Blob_Position_,_Blob_Position_2_,_Blob_Enable_,_Blob_Enable_2_,_Blob_Near_Size_,_Blob_Near_Size_2_,_Blob_Inner_Fade_,_Blob_Inner_Fade_2_,_Blob_Pulse_,_Blob_Pulse_2_,_Blob_Fade_,_Blob_Fade_2_,Position_Q121,Near_Size_Q121,Inner_Fade_Q121,Blob_Enable_Q121,Fade_Q121,Pulse_Q121);

    // Hide_Faces
    float Visible_Q122 = _Hide_XY_Faces_ ? abs(vertexLocalNormal.z) : 1.0;

    float3 Nrm_World_Q126;
    Object_To_World_Dir_B126(vertexLocalNormal,Nrm_World_Q126);

    float3 Dir_World_Q118;
    Object_To_World_Dir_B118(vertexLocalTangent,Dir_World_Q118);

    float3 Dir_World_Q119;
    Object_To_World_Dir_B118(vertexLocalBinormal,Dir_World_Q119);

    // Scale3
    float3 Result_Q113 = 0.5 * vertexLocalNormal;

    // Normalize3
    float3 Normalized_Q111 = normalize(Nrm_World_Q126);

    // Normalize3
    float3 Normalized_Q109 = normalize(Dir_World_Q118);

    // Normalize3
    float3 Normalized_Q110 = normalize(Dir_World_Q119);

    float3 Pos_World_Q112;
    Object_To_World_Pos_B112(Result_Q113,Pos_World_Q112);

    // Face_Size
    float2 Face_Size_Q130;
    Face_Size_Q130 = float2(length(Dir_World_Q118),length(Dir_World_Q119));
    
    float3 Out_Position_Q133;
    float2 Out_UV_Q133;
    float3 Blob_Info_Q133;
    Blob_Vertex_B133(Normalized_Q111,Normalized_Q109,Normalized_Q110,Position_Q121,_Blob_Intensity_,float4(0.41,0,0.216,1),float4(0,0.089,1,1),Near_Size_Q121,_Blob_Far_Size_,_Blob_Near_Distance_,_Blob_Far_Distance_,vertexInput_Color,vertexInput_UV,Pos_World_Q112,Face_Size_Q130,_Blob_Fade_Length_,Inner_Fade_Q121,Blob_Enable_Q121,Fade_Q121,Pulse_Q121,Visible_Q122,Out_Position_Q133,Out_UV_Q133,Blob_Info_Q133);

    float3 Position = Out_Position_Q133;
    float2 UV = Out_UV_Q133;
    float3 Tangent = float3(0,0,0);
    float3 Binormal = float3(0,0,0);
    float4 Color = float4(1,1,1,1);
    float4 Extra1 = float4(0,0,0,0);
    float3 Normal = Blob_Info_Q133;


    huxVertexOutput_Normal = Normal;
    huxVertexOutput_UV = UV;
    huxVertexOutput_Offset = Position-vertexWorldPosition;
	return huxVertexOutput_Offset;
}

//BLOCK_BEGIN Blob_Fragment 131

void Blob_Fragment_B131(
    Texture2D Blob_Texture, SamplerState Blob_Texture_Sampler,
    half3 Blob_Info,
    float2 UV,
    out half4 Blob_Color)
{
    half k = dot(UV,UV);
    Blob_Color = Blob_Info.y * Texture2DSample(Blob_Texture, Blob_Texture_Sampler, float2(sqrt(k),Blob_Info.x))*(1.0-saturate(k));
}
//BLOCK_END Blob_Fragment


float4 Hushed_Fragment(
    FMaterialPixelParameters Parameters
    ,Texture2D _Blob_Texture_, SamplerState _Blob_Texture_Sampler
    ,bool _Show_Frame_
    ,int useGlobalLeftIndex
    ,int useGlobalRightIndex
    ,float4 globalLeftIndexTipPosition
    ,float4 globalRightIndexTipPosition

	,float3 fragInput_Normal
	,float2 fragInput_UV
)
{
    Use_Global_Left_Index_Int = useGlobalLeftIndex;
    Use_Global_Right_Index_Int = useGlobalRightIndex;
    Global_Left_Index_Tip_Position = globalLeftIndexTipPosition;
    Global_Right_Index_Tip_Position = globalRightIndexTipPosition;

    half4 Blob_Color_Q131;
    Blob_Fragment_B131(_Blob_Texture_,_Blob_Texture_Sampler,fragInput_Normal,fragInput_UV,Blob_Color_Q131);

    // Conditional_Color
    half4 Result_Q132 = _Show_Frame_ ? half4(0.3,0.3,0.3,0.3) : Blob_Color_Q131;

    float4 Out_Color = Result_Q132;
    float Clip_Threshold = 0;
    bool To_sRGB = false;

    return Out_Color;
}

#endif
